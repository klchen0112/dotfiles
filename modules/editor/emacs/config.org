#+title: KLChen
#+PROPERTY: header-args:emacs-lisp :tangle config.el
* lexical-binding
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src
* Benchmark
#+begin_src emacs-lisp
  (use-package benchmark-init
    :when init-file-debug
    :ensure t
    :config
    ;; To disable collection of benchmark data after init is done.
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src
* Complier Settings
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
  ;;;; Compiler settings
  (eval-when-compile
    (require 'use-package)
    (if init-file-debug
        (progn
          (message "--debug-init active")
          (setq use-package-compute-statistics t)
          (setq use-package-verbose t)
          (setq use-package-minimum-reported-time 0.001))
      (setq use-package-compute-statistics nil))
    (setq use-package-always-defer t)
    (setq use-package-expand-minimally t))
#+end_src
* Native Compilation
#+begin_src emacs-lisp
  (when (and (fboundp 'native-comp-available-p) (native-comp-available-p))
    (setq native-comp-async-report-warnings-errors nil
          native-comp-deferred-compilation t
  	package-native-compile t)
    )
#+end_src

* Constants

#+begin_src emacs-lisp
;; 判断操作系统类型
(defconst IS-MAC (eq system-type 'darwin))
(defconst IS-LINUX (eq system-type 'gnu/linux))
(defconst IS-WINDOWS (eq system-type 'windows-nt))

#+end_src
* Startup
** meow
#+begin_src emacs-lisp
  (use-package meow
    :ensure t
    :demand t
    :init
    (setq meow-leader-key "SPC")  ; 设置 leader 键为空格
    :config
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore)
     )
    (meow-leader-define-key
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet)
     )
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)
     )
    (meow-global-mode 1)
    )

  (use-package meow-tree-sitter
    :after (meow treesit)
    :config
    (meow-tree-sitter-register-defaults)
    )
#+end_src
** Rime
#+begin_src emacs-lisp
  (use-package sis
    :if (or IS-MAC IS-LINUX)
    :init
    (add-hook 'meow-insert-exit-hook #'sis-set-english)
    :config
    (sis-ism-lazyman-config
     "com.apple.keylayout.UnicodeHexInput"
     "im.rime.inputmethod.Squirrel.Rime"
     )
    ;; enable the /cursor color/ mode
    (sis-global-cursor-color-mode t)
    ;; enable the /respect/ mode
    (sis-global-respect-mode t)
    ;; enable the /context/ mode for all buffers
    (sis-global-context-mode t)
    ;; enable the /inline english/ mode for all buffers
    (sis-global-inline-mode t)
    )

  (use-package rime
   :defer t
   :bind
   (:map rime-mode-map
         ("S- " . 'rime-send-keybinding))
   :config
   (if IS-LINUX
    (setq rime-user-data-dir "~/.local/share/fcitx5/rime")
    (setq rime-user-data-dir "~/Library/Rime")
    )
   (setq rime-show-candidate 'posframe)
   (setq rime-show-preedit 'inline)
   (setq default-input-method "rime")
   (setq rime-inline-ascii-trigger 'shift-r)
   (setq rime-translate-keybindings '("C-f" "C-b" "C-n" "C-p" "C-g" "<left>" "<right>" "<up>" "<down>" "<prior>" "<next>" "<delete>"))
   )

  (use-package rime-regexp
    :after rime
    :config
    (rime-regexp-mode t))

#+end_src
** shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config (when (daemonp)
              (exec-path-from-shell-initialize))
   )
#+end_src
* Editor
* Ui
** Relate live number
#+begin_src emacs-lisp
  (setq display-line-numbers-type t)
#+end_src
#+begin_src emacs-lisp
 ;; Disable UI chrome earl
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (setq window-divider-default-right-width 0)
  (setq window-divider-default-bottom-width 0)
  (window-divider-mode -1)

  (add-to-list 'default-frame-alist '(internal-border-width . 0))
  (set-frame-parameter nil 'internal-border-width 0)
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package modus-themes
    :demand t)
  (use-package ef-themes
    :demand t
    :after modus-themes
    :init
    ;; This makes the Modus commands listed below consider only the Ef
    ;; themes.  For an alternative that includes Modus and all
    ;; derivative themes (like Ef), enable the
    ;; `modus-themes-include-derivatives-mode' instead.
    ;;(ef-themes-take-over-modus-themes-mode 1)
    :config
    ;; All customisations here.
    (setq modus-themes-mixed-fonts t)
    (setq modus-themes-italic-constructs t)

    ;; Finally, load your theme of choice (or a random one with
    ;; `modus-themes-load-random', `modus-themes-load-random-dark',
    ;; `modus-themes-load-random-light').
    (modus-themes-load-theme 'ef-owl))
#+end_src

*** smooth scrolling
#+begin_src emacs-lisp
  (pixel-scroll-precision-mode 1)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) 
#+end_src
** Font
*** Nerd icons
#+begin_src emacs-lisp
  (use-package nerd-icons
    :defer t)
#+end_src


** Dashboard And Modline


#+begin_src emacs-lisp
  (use-package dashboard
    :demand t
    :config
    (setq dashboard-icon-type 'nerd-icons)
     (dashboard-setup-startup-hook)
   )

  (use-package doom-modeline
    :demand t
    :hook
    (
     (after-init . doom-modeline-mode)
     (doom-modeline-mode . size-indication-mode)
     (doom-modeline-mode . column-number-mode) 
     )
    )

#+end_src

* Navigation
** which-key

#+begin_src emacs-lisp
(use-package which-key
    :hook (after-init . which-key-mode)
    :custom
    (setq which-key-idle-delay 0.3)
)
#+end_src


* org mode

** base settings
#+begin_src emacs-lisp
  (setq org-directory "~/org")

  (use-package org
    :bind ("C-c I" . 'org-id-get-create)
    )

  (use-package org-download
    :after org
    :config
    (setq org-download-method 'directory)
    (setq org-download-image-dir "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org-attach")
    (setq org-download-heading-lvl 'nil)
    )
  
  (use-package org-agenda
    :after org
    :config
    ;; 时间前导0
    (setq org-agenda-time-leading-zero t)
    ;; 默认显示区间
    (setq org-agenda-span 7)
    ;; agenda view 默认从周一开始显示
    (setq org-agenda-start-on-weekday 1)
    )

  (use-package org-modern
    :after org
    :hook
    (org-mode . org-modern-mode)
    :config
    ;; Add frame borders and window dividers
    (modify-all-frames-parameters
     '((right-divider-width . 40)
       (internal-border-width . 40)))
    (dolist (face '(window-divider
                    window-divider-first-pixel
                    window-divider-last-pixel))
      (face-spec-reset-face face)
      (set-face-foreground face (face-attribute 'default :background)))
    (set-face-background 'fringe (face-attribute 'default :background))

    (setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t
     org-agenda-tags-column 0
     org-ellipsis "…")

    )
#+end_src
** Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :after org
    :commands (org-roam-buffer
               org-roam-setup
               org-roam-capture
               org-roam-node-find)
    :bind (("C-c n r a" . org-id-get-create)
  	 ("C-c n l" . org-roam-buffer-toggle)
  	 ("C-c n f" . org-roam-node-find)
  	 ("C-c n g" . org-roam-graph)
  	 ("C-c n i" . org-roam-node-insert)
  	 ("C-c n c" . org-roam-capture)
  	 ("C-c n r" . org-roam-ref-find)
  	 ("C-c n R" . org-roam-ref-add)
  	 ("C-c n s" . org-roam-db-sync)
  	 ("C-c n e" . org-roam-to-hugo-md)
  	 ;; Dailies
  	 ("C-c n j" . org-roam-dailies-capture-today))
    :custom
    (org-roam-directory (file-truename org-directory))
    :config
    (org-roam-db-autosync-mode)
    (setq org-id-link-to-org-use-id t)
    (setq org-roam-completion-everywhere t)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol)
    )

  (use-package org-roam-ui
    :after org-roam ;; or :after org
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
  	org-roam-ui-update-on-save t
          org-roam-ui-open-on-start nil
  	)
    )

  ;;自动创建笔记的创建时间和修改时间
  (use-package org-roam-timestamps
    :after org-roam
    :defer t
    :config
    (org-roam-timestamps-mode)
    (setq org-roam-timestamps-parent-file t))

  ;;跨文件的引用，能够实现笔记的一处修改，处处修改。
  (use-package org-transclusion
    :after org-roam
    :defer t
    :config
    (org-transclusion-mode)
    )

  (use-package consult-org-roam
    :after org-roam
    :config
    (consult-org-roam-mode)
    :custom
    ;; Use `ripgrep' for searching with `consult-org-roam-search'
    (consult-org-roam-grep-func #'consult-ripgrep)
    ;; Configure a custom narrow key for `consult-buffer'
    (consult-org-roam-buffer-narrow-key ?r)
    ;; Display org-roam buffers right after non-org-roam buffers
    ;; in consult-buffer (and not down at the bottom)
    (consult-org-roam-buffer-after-buffers t)
  )
#+end_src
** Bibtex
#+begin_src emacs-lisp
  (setq my/bib (concat "~/org/" "academic.bib")
        my/notes (concat "~/org/" "references")
        my/library-files "~/Documents/org-pdfs")

  (use-package citar)
  (use-package citar-org-roam
    :after (citar org-roam)
    )
  (use-package org-roam-bibtex
    :after (org-roam)
    )
#+end_src
** Babel
* History

#+begin_src emacs-lisp
  (use-package savehist
    :ensure nil ; it is built-in
    :hook (after-init . savehist-mode))

#+end_src
* Compeletion
** Vertico and orderless
#+begin_src emacs-lisp
  (use-package orderless
    :after vertico
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles partial-completion))))
    (completion-category-defaults nil) ;; Disable defaults, use our settings
    (completion-pcm-leading-wildcard t)
    (orderless-component-separator #'orderless-escapable-split-on-space)
    )

  (use-package vertico
    :hook
    (after-init . vertico-mode)
    :custom
    (vertico-cycle t)
    )

  (use-package marginalia
    :ensure t
    :hook (after-init . marginalia-mode))


  (use-package nerd-icons-completion
    :after marginalia
    :config
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

  (use-package vertico-directory
    :ensure nil
    :after vertico)

  (use-package vertico-flat
    :after vertico
    :ensure nil
    :custom
    (vertico-flat-mode)
    )
#+end_src
** Embark
  #+begin_src emacs-lisp
    (use-package embark)
    (use-package consult)
    (use-package embark-consult
      :after (:all embark consult)
      :hook
      (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :hook
    (after-init . global-corfu-mode)
    :custom
    (corfu-auto t)
    (corfu-atuo-refix 2)
    (corfu-cycle t)
    (corfu-preselect 'prompt)
    (corfu-count 16)
    (corfu-max-width 120)
    (corfu-on-exact-match nil)
    (corfu-quit-at-boundary     'separator)
    (tab-always-indent 'complete))

  (use-package nerd-icons-corfu
    :defer t
    :after (:all nerd-icons corfu)
    )
  (use-package corfu-terminal
    :ensure nil
    :unless (featurep 'tty-child-frames)
    :hook (corfu-mode . corfu-terminal-mode)
    :after (corfu)
    )
  (use-package corfu-history
    :ensure nil
    :hook ((corfu-mode . corfu-history-mode))
    :after corfu
    )

  (use-package corfu-popupinfo
    :ensure nil
    :hook ((corfu-mode . corfu-popupinfo-mode))
    :config
    (setq corfu-popupinfo-delay '(0.5 . 1.0))
    )
  
  (use-package cape
    :defer t
    :init
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block)
    )
#+end_src
** Tempel
#+begin_src emacs-lisp

  (use-package tempel
    :ensure t
    :custom
    (tempel-trigger-prefix "<")

    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
  	 ("M-*" . tempel-insert))
    :init

    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
  		(cons #'tempel-expand
                        completion-at-point-functions)))

    (add-hook 'conf-mode-hook 'tempel-setup-capf)
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)

    )
  (use-package tempel-collection
    :ensure t
    :after tempel
    )
   #+end_src

* Env
#+begin_src emacs-lisp
  (use-package envrc
    :hook (after-init . envrc-global-mode))

  (use-package direnv
   :config
   (direnv-mode))

#+end_src
* Project
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode)
   #+end_src

* Files

#+begin_src emacs-lisp
    (use-package dired
      :ensure nil
      )
  (use-package nerd-icons-dired
    :ensure t
    :hook
    (dired-mode . nerd-icons-dired-mode))
  
    (use-package dirvish
      :after dired)

    (use-package diredfl
      :after dired)
#+end_src
* Git

#+begin_src emacs-lisp
  (when (featurep :system 'windows)
    (setenv "GIT_ASKPASS" "git-gui--askpass"))

  (use-package magit
    :defer t)

  (use-package forge
    :after magit)

  (use-package diff-hl
    :defer t)

  (use-package smerge-mode
    :ensure nil
    :defer t)
  #+end_src
* Terminal

#+begin_src emacs-lisp
    (use-package eat
      :defer t)

#+end_src

* Lang
** Fmt
#+begin_src emacs-lisp
  (use-package format-all)
#+end_src
** Dae
#+begin_src emacs-lisp
  (use-package dape
    :commands
    (dape)
    :custom
    (dape-buffer-window-arrangement 'right)
    (dape-inlay-hints t)
    :hook
    (dape-mode    . repeat-mode)
    (dape-mode    . eldoc-mode)
    (kill-emasc   . dape-breakpoint-save)
    (after-init   . dape-breakpoint-load)
    (dape-compile . kill-buffer))
#+end_src
** Tree-sitter
#+begin_src emacs-lisp
  (use-package treesit
    :when (treesit-available-p)
    :defer t
    :preface
    )

  (use-package treesit-fold
    :when (treesit-available-p)
    :defer t
    :after treesit
   )
#+end_src
** LSP

#+begin_src emacs-lisp
  (defun eglot-setup-eldoc ()
    (setq-local eldoc-documentation-functions '(flymake-eldoc-function
                                                eglot-signature-eldoc-function
                                                eglot-hover-eldoc-function)))
  (use-package eglot
    :defer t
    :custom
    (eglot-autoshutdown t)
    :hook
    (eglot-mode . 'eglot-setup-eldoc)
    )

  (use-package consult-eglot
    :after eglot
    )

  (use-package consult-eglot-embark
    :after (consult-eglot embark)
    :config
    (consult-eglot-embark-mode)
   )

  (use-package eglot-booster
    :after eglot
    :custom (eglot-booster-io-only t)
    :config (eglot-booster-mode)
    )
   #+end_src
** JAVA
#+begin_src emacs-lisp
  (use-package java-mode
    :mode
    ("\\.java\\'" . java-ts-mode)
    )

  (use-package eglot-java
    :after eglot
    :hook (java-base-mode . eglot-java-mode)
    )
#+end_src
** Python
*** Mode
#+begin_src emacs-lisp
  (use-package python-mode
    :ensure nil
    :mode
    ("\\.py\\'" . python-ts-mode)
    )
#+end_src
*** Fmt
#+begin_src emacs-lisp
  (use-package ruff-format
    :after python)
#+end_src
*** Env
#+begin_src emacs-lisp
  (use-package pet
    :hook
    (python-base-mode . (lambda () pet-mode
  			(setq-local python-shell-interpreter (pet-executable-find "python")
  				    python-shell-virtualenv-root (pet-virtualenv-root))
  			(pet-eglot-setup)
  			(eglot-ensure)
  			(pet-flycheck-setup)
  			(flycheck-mode)
  			(setq-local lsp-pyright-python-executable-cmd python-shell-interpreter
  				    lsp-pyright-venv-path python-shell-virtualenv-root)
  			(eglot)
  			(setq-local dap-python-executable python-shell-interpreter)

  			(setq-local python-pytest-executable (pet-executable-find "pytest"))
  			
  		    )
    )
#+end_src
** Rust
#+begin_src emacs-lisp
  (use-package rust-ts-mode
    :if (treesit-language-available-p 'rust)
    :mode (("\\.rs\\'" . rust-ts-mode))
  )
#+end_src
** CPP

** Json
#+begin_src emacs-lisp
    (use-package json-mode
    :mode "\\.js\\(?:on\\|[hl]int\\(?:rc\\)?\\)\\'")

    (use-package json-snatcher)

    (use-package json-ts-mode
      :ensure nil)
#+end_src

** Nix
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist
               (cons "/flake\\.lock\\'"
                     ('json-mode
                      'js-mode)))
  
  (use-package nix-ts-mode
    :mode ("\\.nix\\'" . nix-ts-mode)
    :hook
    ((nix-base-mode . eglot-ensure))
    )

  (use-package nix-shell
    :ensure nil)

  (use-package nix-update)

  (use-package nix-drv-mode
    :ensure nil)
#+end_src

** Just mode

#+begin_src emacs-lisp
  (use-package just-mode
    :mode (
  	 ("/[Jj]ustfile\\'" . just-mode)
  	 ("\\.[Jj]ust\\(file\\)?\\'" . just-mode)
     )
   )
  (use-package justl)
#+end_src

** Yaml Mode
#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

** Docker

#+begin_src emacs-lisp
    (use-package docker)
    
    (use-package dockerfile-ts-mode
      :mode (".*Dockerfile\\'" . dockerfile-ts-mode)
      :ensure nil)
#+end_src

* LLM
#+begin_src emacs-lisp
(use-package gptel)

#+end_src
