#+title: KLChen
#+PROPERTY: header-args:emacs-lisp :tangle config.el
* lexical-binding
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src


* config.el


* Native Compilation
#+begin_src emacs-lisp
  (when (and (fboundp 'native-comp-available-p) (native-comp-available-p))
    (setq native-comp-async-report-warnings-errors nil
          native-comp-deferred-compilation t
  	package-native-compile t)
    )
#+end_src

* Constants

#+begin_src emacs-lisp
;; 判断操作系统类型
(defconst IS-MAC (eq system-type 'darwin))
(defconst IS-LINUX (eq system-type 'gnu/linux))
(defconst IS-WINDOWS (eq system-type 'windows-nt))

#+end_src
* use-package
#+begin_src emacs-lisp
(setq use-package-always-defer t)
#+end_src
* Startup
#+begin_src emacs-lisp
  (use-package meow
    :ensure t
    :demand t
    :init
    (setq meow-leader-key "SPC")  ; 设置 leader 键为空格
    :config
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore)
     )
    (meow-leader-define-key
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet)
     )
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)
     )
    (meow-global-mode 1)
    )
#+end_src
* Editor
* Ui
** Relate live number
#+begin_src emacs-lisp
  (setq display-line-numbers-type t)
#+end_src
#+begin_src emacs-lisp
 ;; Disable UI chrome earl
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (setq window-divider-default-right-width 0)
  (setq window-divider-default-bottom-width 0)
  (window-divider-mode -1)

  (add-to-list 'default-frame-alist '(internal-border-width . 0))
  (set-frame-parameter nil 'internal-border-width 0)
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package modus-themes
    :demand t)
  (use-package ef-themes
    :demand t
    :after modus-themes
    :init
    ;; This makes the Modus commands listed below consider only the Ef
    ;; themes.  For an alternative that includes Modus and all
    ;; derivative themes (like Ef), enable the
    ;; `modus-themes-include-derivatives-mode' instead.
    ;;(ef-themes-take-over-modus-themes-mode 1)
    :config
    ;; All customisations here.
    (setq modus-themes-mixed-fonts t)
    (setq modus-themes-italic-constructs t)

    ;; Finally, load your theme of choice (or a random one with
    ;; `modus-themes-load-random', `modus-themes-load-random-dark',
    ;; `modus-themes-load-random-light').
    (modus-themes-load-theme 'ef-owl))
#+end_src
** Font
*** Nerd icons
#+begin_src emacs-lisp
  (use-package nerd-icons
    :defer t)
#+end_src


** Dashboard And Modline


#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook))

  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

* Navigation
** which-key

#+begin_src emacs-lisp
(use-package which-key
    :hook (after-init . which-key-mode)
    :custom
    (setq which-key-idle-delay 0.3)
)
#+end_src


* org mode

** base settings
#+begin_src emacs-lisp
  (setq org-directory "~/org")
  (use-package org
    :defer t
    :define
    :bind ("C-c I" . 'org-id-get-create)
    )
  (use-package org-modern
    :after org
    :hook
    (org-mode . org-modern-mode)
    :config
    ;; Add frame borders and window dividers
    (modify-all-frames-parameters
     '((right-divider-width . 40)
       (internal-border-width . 40)))
    (dolist (face '(window-divider
                    window-divider-first-pixel
                    window-divider-last-pixel))
      (face-spec-reset-face face)
      (set-face-foreground face (face-attribute 'default :background)))
    (set-face-background 'fringe (face-attribute 'default :background))

    (setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t
     org-agenda-tags-column 0
     org-ellipsis "…")

    )
#+end_src
** Roam
#+begin_src emacs-lisp
  (use-package org-roam
            :after org
             :custom
             (org-roam-directory (file-truename org-directory))
             :config
             (org-roam-db-autosync-mode)
        ;; If using org-roam-protocol
        (require 'org-roam-protocol)
        )

  (use-package org-roam-ui
      :after org-roam ;; or :after org
      :config
        (setq org-roam-ui-sync-theme t
              org-roam-ui-follow t)
   )
#+end_src
** Babel
* History

#+begin_src emacs-lisp
  (use-package savehist
    :ensure nil ; it is built-in
    :hook (after-init . savehist-mode))

#+end_src
* Compeletion
** Vertico and orderless
#+begin_src emacs-lisp
  (use-package orderless
    :after vertico
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles partial-completion))))
    (completion-category-defaults nil) ;; Disable defaults, use our settings
    (completion-pcm-leading-wildcard t)
    (orderless-component-separator #'orderless-escapable-split-on-space)
    )

  (use-package vertico
    :hook
    (after-init . vertico-mode)
    :custom
    (vertico-cycle t)
    )

  (use-package marginalia
    :ensure t
    :hook (after-init . marginalia-mode))


  (use-package nerd-icons-completion
    :after marginalia
    :config
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

  (use-package vertico-directory
    :ensure nil
    :after vertico)

  (use-package vertico-flat
    :after vertico
    :ensure nil
    :custom
    (vertico-flat-mode)
    )
#+end_src
** Embark
  #+begin_src emacs-lisp
    (use-package embark)
    (use-package consult)
    (use-package embark-consult
      :after (:all embark consult)
      :hook
      (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :hook
    (after-init . global-corfu-mode)
    :custom
    (corfu-auto t)
    (corfu-atuo-refix 2)
    (corfu-cycle t)
    (corfu-preselect 'prompt)
    (corfu-count 16)
    (corfu-max-width 120)
    (corfu-on-exact-match nil)
    (corfu-quit-at-boundary     'separator)
    (tab-always-indent 'complete))

  (use-package nerd-icons-corfu
    :defer t
    :after (:all nerd-icons corfu)
    )
  (use-package corfu-terminal
    :ensure nil
    :unless (featurep 'tty-child-frames)
    :hook (corfu-mode . corfu-terminal-mode)
    :after (corfu)
    )
  (use-package corfu-history
    :ensure nil
    :hook ((corfu-mode . corfu-history-mode))
    :after corfu
    )

  (use-package corfu-popupinfo
    :ensure nil
    :hook ((corfu-mode . corfu-popupinfo-mode))
    :config
    (setq corfu-popupinfo-delay '(0.5 . 1.0))
    )
  
  (use-package cape
    :defer t
    :init
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block)
    )
#+end_src
** Tempel
#+begin_src emacs-lisp

  (use-package tempel
    :ensure t
    :custom
    (tempel-trigger-prefix "<")

    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
  	 ("M-*" . tempel-insert))
    :init

    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
  		(cons #'tempel-expand
                        completion-at-point-functions)))

    (add-hook 'conf-mode-hook 'tempel-setup-capf)
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)

    )
  (use-package tempel-collection
    :ensure t
    :after tempel
    )
   #+end_src

* Env
#+begin_src emacs-lisp
(use-package envrc
  :hook (after-init . envrc-global-mode))
#+end_src
* Project
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode)
   #+end_src

* Files

#+begin_src emacs-lisp
    (use-package dired
      :ensure nil
      )
  (use-package nerd-icons-dired
    :ensure t
    :hook
    (dired-mode . nerd-icons-dired-mode))
  
    (use-package dirvish
      :after dired)

    (use-package diredfl
      :after dired)
#+end_src
* Git

#+begin_src emacs-lisp
  (when (featurep :system 'windows)
    (setenv "GIT_ASKPASS" "git-gui--askpass"))

  (use-package magit
    :defer t)

  (use-package forge
    :after magit)

  (use-package diff-hl
    :defer t)

  (use-package smerge-mode
    :ensure nil
    :defer t)
  #+end_src
* Terminal

#+begin_src emacs-lisp
    (use-package eat
      :defer t)

#+end_src

* Lang
** Fmt
#+begin_src emacs-lisp
  (use-package format-all)
#+end_src
** Tree-sitter
#+begin_src emacs-lisp
  (use-package treesit-auto
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode
  )
  )
#+end_src
** LSP

#+begin_src emacs-lisp
  (defun eglot-setup-eldoc ()
    (setq-local eldoc-documentation-functions '(flymake-eldoc-function
                                                eglot-signature-eldoc-function
                                                eglot-hover-eldoc-function)))
  (use-package eglot
    :defer t
    :custom
    (eglot-autoshutdown t)
    :hook
    (eglot-mode . 'eglot-setup-eldoc)
    )

  (use-package eglot-booster
    :after eglot
    :custom (eglot-booster-io-only t)
    :hook (eglot-mode . eglot-booster-mode)
    )
   #+end_src
** JAVA
#+begin_src emacs-lisp
  (use-package eglot-java
    :after eglot
  )
#+end_src
** Python
*** Env
#+begin_src emacs-lisp
(use-package pet
  :config
  (add-hook 'python-base-mode-hook 'pet-mode -10))
#+end_src
** CPP

** Json
#+begin_src emacs-lisp
    (use-package json-mode
    :mode "\\.js\\(?:on\\|[hl]int\\(?:rc\\)?\\)\\'")

    (use-package json-snatcher)

    (use-package json-ts-mode
      :ensure nil)
#+end_src

** Nix
#+begin_src emacs-lisp

  (add-to-list 'auto-mode-alist
               (cons "/flake\\.lock\\'"
                     ('json-mode
                      'js-mode)))
  (use-package nix-mode
    :mode "\\.nix\\'"
    )

  (use-package nix-update)

  (use-package nix-ts-mode)


  (use-package nix-update
    :commands nix-update-fetch)
#+end_src

** Just mode

#+begin_src emacs-lisp
  (use-package just-mode
    :mode (
  	 ("/[Jj]ustfile\\'" . just-mode)
  	 ("\\.[Jj]ust\\(file\\)?\\'" . just-mode)
     )
   )
  (use-package justl)
#+end_src

** Yaml Mode
#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

** Docker

#+begin_src emacs-lisp
    (use-package docker)
    
    (use-package dockerfile-ts-mode
      :mode (".*Dockerfile\\'" . dockerfile-ts-mode)
      :ensure nil)
#+end_src

* LLM
#+begin_src emacs-lisp
(use-package gptel)

#+end_src
