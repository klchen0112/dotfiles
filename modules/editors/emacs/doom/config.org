:PROPERTIES:
:ID:       1bf5e137-a333-43da-827f-c09885a402b8
:END:
#+TITLE: config
#+AUTHOR: klchen0112
#+EMAIL: klchen0112@gmail.com
#+startup: fold
#+property: header-args :emacs-lisp :tangle yes :comments link
#+property: header-args :elisp :exports code
#+property: header-args :tangle no :results silent :eval no-export
* Init.el
:PROPERTIES:
:ID: d8d43fa6-0b7e-47c7-9c65-919b510c8202
:END:
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
                                        ;   ;

;; This file controls what jDoom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; ?OTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       layout            ; auie,ctsrnm is the superior home row

       :completion
       (corfu
        +icons ;; Display icons beside completion suggestions.
        +orderless
        +dabbrev ;; as a close-to-universal CAPF
        +dict ;; Enable and configure dictionary completion for text modes and related regions in programming modes.
        +emoji ;; Enable and configure emoji completion via the emoji input method.
        ) ; wait for doom merge
       ;;(company +childframe +tng)           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;(ivy +fuzzy +prescient +childframe +icons)               ; a search engine for love and life
       (vertico +icons
                +childframe ;; not for yabai
                )         ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       (ligatures
        +extra
        +fira ; fira font ligatures
        +hasklig ; HaskLig font ligatures
        +iosevka ; iosevka font ligatures
        +pragmata-pro ; Pragmata-Pro font ligatures
        )       ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup ; tame sudden yet inevitable temporary windows
        +all
        +defaults)          ;;
       ;;tabs              ; a tab bar for Emacs
       ;;(treemacs +lsp)       ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various language
       (vc-gutter +pretty)         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       (window-select +numbers)     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       ;;(meow  +qwerty +override +leader)
       ;;(evil +everywhere); come to  dark side, we have cookies
       file-templates    ; auto-snippets for files
       fold              ; (nigh) universal code folding
       (format ; automated prettiness
        +onsave ; only-changes
        )
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired
        ;; +ranger           ; make bringing the goodness of ranger to dired
        +icons           ; making dired pretty [functional]
        +dirvish)
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)        ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       (syntax +childframe)              ; tasing you for every semicolon you forget
       (spell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       biblio            ; Writes a PhD for you (citation needed)
       ;;collab ; buffers with friends
       debugger          ; FIXME stepping through code, to help you add bugs
       direnv
       ;; (docker +lsp)
       ;; editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       gist              ; interacting with github gists
       (lookup +dictionary +docsets +offline)             ; navigate your code and its documentation
       (lsp +peek)              ; M-x vscode
       (magit             ; a git porcelain for Emacs
        +forge)             ; interface with git forges
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       tree-sitter
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp
           ;; C > C++ == 1
           ;;+tree-sitter
           )
       ;;(clojure +lsp)           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       (emacs-lisp; drown in parentheses
        +ttree-sitter
        )
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       (json  +lsp)            ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
       ;;(julia +lsp ; a better, faster MATLAB
       ;;+tree-sitter
       ;;      )
       ;;kotlin            ; a better, slicker Java(Script)
       (latex             ; writing papers in Emacs has never been so fun
        +lsp
        +latexmk                    ; what else would you use?
        +cdlatex                    ; quick maths symbols
        +fold)                      ; fold the clutter away nicities
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       (lua +lsp +fennel +moonscript)              ; one-based indices? one-based indices
       (markdown
        +grip
        )          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       (nix +lsp +tree-sitter)               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org              ; organize your plain life in plain text
        ;;+brain
        ;;+contacts ; Insert org-mode links to items selected in various Mac apps.
        +dragndrop                  ; drag & drop files/images into org buffers
        ;;+gnuplot                    ; who doesn't like pretty pictures
        +hugo                     ; use Emacs for hugo blogging
        ;; +journal ;; use org roam dailyies
        +noter ;; enhanced pdf notetaking
        ;;+pretty                     ; yessss my pretties! (nice unicode symbols)
        ;;+jupyter                    ; ipython/jupyter support for babel
        +pandoc                     ; export-with-pandoc support
        ;;+pomodoro                 ; be fruitful with the tomato technique
        ;;+present                    ; using org-mode for presentations
        +roam2)                     ; wander around notes
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp
               +pyright
               +pyenv
               +cpython
               ;; (if (not IS-MAC) +conda)
               +poetry
               +tree-sitter
               )            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       (sh  +fish)               ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;(web +lsp)              ; the tubes
       (yaml +lsp +tree-sitter)              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere           ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))

;;TODO remove add to list
;;(add-to-list 'load-path (concat doom-emacs-dir ".local/straight/repos/nursery/lisp"))
#+end_src
* packages
:PROPERTIES:
:ID:       e970a14b-3bdc-45bf-af5c-f85727067773
:END:
#+begin_src emacs-lisp conf :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
(disable-packages! evil-escape)
;;(unpin! lsp-mode)
;;(unpin! forge)
#+end_src
* Basic setting
** Simple Settings
:PROPERTIES:
:ID:       0f38d9a6-c7d4-4370-bd44-839d77bc33a4
:END:
#+begin_src emacs-lisp conf :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snipets. It is optional.
(setq user-full-name "klchen0112"
    user-mail-address "klchen0112@gmail.com")

(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

;; Simple Settings
(setq-default
 dired-dwim-target t
 history-length 1000
 create-lockfiles nil
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t                              ; Stretch cursor to the glyph width
)

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "…"                ; Unicode ellispis are nicer than "...", and also save /precious/ space
      password-cache-expiry nil                   ; I can trust my computers ... can't I?
      ;; scroll-preserve-screen-position 'always     ; Don't have `point' jump around
      scroll-preserve-screen-position 'always     ; Don't have `point' jump around
      word-wrap-by-category t                     ; Different languages live together happily
      scroll-margin 2)                            ; It's nice to maintain a little margin
(setq which-key-idle-delay 0.3) ;; I need the help, I really do

;; Drag text from emacs to other apps
(setq
 mouse-drag-and-drop-region-cross-program t
 mouse-drag-and-drop-region t)
;;(pixel-scroll-mode)
;;(pixel-scroll-precision-mode 1)
;;(setq pixel-scroll-precision-large-scroll-height 60
;;     pixel-scroll-precision-interpolation-factor 30.0)
#+end_src
** exec path
#+begin_src emacs-lisp :tangle config.el
(setq shell-file-name (executable-find "bash"))
(setq-default vterm-shell (executable-find "fish"))

(setq-default explicit-shell-file-name (executable-find "fish"))
#+end_src
** workaround
#+begin_src emacs-lisp config.el
(setq native-comp-async-jobs-number 16)
#+end_src
** Global mode
:PROPERTIES:
:ID:       f610bfb5-ce6d-44fa-ae62-bcbf155ced56
:END:
#+begin_src emacs-lisp :tangle packages.el


#+end_src


#+begin_src emacs-lisp conf :tangle config.el
;; (display-time-mode 1)                             ; Enable time in the mode-line

(global-subword-mode 1)                           ; Iterate through CamelCase words
(global-visual-line-mode 1)                       ; Wrap lines at window edge, not at 80th character: my screen is wide enough!

(scroll-bar-mode 1)
;;(+global-word-wrap-mode +1)



#+end_src
* start benchmark
:PROPERTIES:
:ID:       12e0119d-2f0b-4684-87c3-c596ade4d065
:END:

#+begin_src emacs-lisp :tangle packages.el
(package! benchmark-init)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! benchmark-init
  :ensure t
  ;;:config
  ;;(add-hook! 'after-init-hook 'benchmark-init/deactivate)
)
#+end_src

* UI settings
** frame
:PROPERTIES:
:ID:       81059094-5346-4f65-b701-5abfbf89598f
:END:
#+begin_src emacs-lisp :tangle packages.el

#+end_src

#+begin_src emacs-lisp conf :tangle config.el
;; Framing Size
;; start the initial frame maximized
;;(add-hook 'window-setup-hook #'toggle-frame-maximized)
;;(add-hook 'window-setup-hook #'toggle-frame-fullscreen)

;; no title bar
(add-to-list 'default-frame-alist '(undecorated . t))
(add-to-list 'default-frame-alist '(drag-internal-border . 1))
(add-to-list 'default-frame-alist '(internal-border-width . 5))
;; no round corners
;; (add-to-list 'default-frame-alist '(undecorated-round . t))
#+end_src
** font
*** font config
:PROPERTIES:
:ID:       06e0dce5-4f1f-4dc4-a8ea-920955909ac4
:END:
#+begin_src emacs-lisp conf :tangle config.el
;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentaion and more examples of what they
;; accept. For example:


;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!
;; DON'T use (`font-family-list'), it's unreliable on Linux
;; org mode table

;;(setq doom-font (font-spec :family "SF Mono"   :size 14)
;;      doom-variable-pitch-font (font-spec :family "TsangerJinKai02" :size 14)
;;      doom-symbol-font (font-spec :family "Symbola" :size 14)
;;      doom-serif-font (font-spec :family "IBM Plex Serif"  :size 17)
;;      )
(setq nerd-icons-font-names '("SymbolsNerdFontMono-Regular.ttf"))
(setq use-default-font-for-symbols nil)
(cond
  ((or IS-MAC IS-LINUX)
    (setq doom-font (font-spec :family "JetBrains Mono"   :size 14)
          ;; doom-big-font (font-spec :family "JetBrains Mono"  :size 28)
          doom-variable-pitch-font (font-spec :family "CMU Typewriter Text"  :size 17)
          ;;doom-unicode-font (font-spec :family "FZSongKeBenXiuKai-R-GBK" :weight 'light :slant 'italic :size 21)
          doom-serif-font (font-spec :family "IBM Plex Serif"  :size 17))
    (add-hook!  'after-setting-font-hook
          ;; Emoji: 😄, 🤦, 🏴󠁧󠁢󠁳󠁣󠁴
          (set-fontset-font t 'symbol   (font-spec :family "Apple Color Emoji"  ))
          (set-fontset-font t 'symbol   (font-spec :family "Symbola"            ))
          (set-fontset-font t 'symbol   (font-spec :family "Noto Color Emoji"   ))
          (set-fontset-font t 'symbol   (font-spec :family "Liberation Mono"    ))
          (set-fontset-font t 'symbol   (font-spec :family "Noto Sans Symbols2" ))
          (set-fontset-font t 'symbol   (font-spec :family "Segoe UI Emoji"     ))
          (set-fontset-font t 'symbol   (font-spec :family "FreeSerif"          ))
          (set-fontset-font t 'symbol   (font-spec :family "Twitter Color Emoji"))
          ;; East Asia: 你好, 早晨, こんにちは, 안녕하세요
          (set-fontset-font t 'han      (font-spec :family "TsangerJinKai02"   ))
          (set-fontset-font t 'kana     (font-spec :family "TsangerJinKai02"   ))
          (set-fontset-font t 'hangul   (font-spec :family "TsangerJinKai02"   ))
          (set-fontset-font t 'cjk-misc (font-spec :family "Noto Serif CJK SC" ))
          ;; Cyrillic: Привет, Здравствуйте, Здраво, Здравейте
          (set-fontset-font t 'cyrillic (font-spec :family "Noto Serif"         ))
  ))
  ((:if IS-WINDOWS)
    (setq doom-font (font-spec :family "Cascadia Code"  :size 23)
        doom-big-font (font-spec :family "Cascadia Code"  :size 25)
        doom-variable-pitch-font (font-spec :family "Cascadia Code" :size 23)
        doom-unicode-font (font-spec :family "霞鹜文楷等宽" :weight 'light :size 23)
        doom-serif-font (font-spec :family "Cascadia Code"  :size 23)))
)

#+end_src
** theme
:PROPERTIES:
:ID:       918efa68-0a34-4e90-ba5f-305b628bbb7b
:END:
#+begin_src emacs-lisp :tangle packages.el
(package! info-colors)

#+end_src

#+begin_src emacs-lisp :tangle config.el
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:

(use-package! doom-themes
  :config
  ;;Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t ; if nil, italics is universally disabled
        doom-themes-padded-modeline t
        doom-themes-treemacs-enable-variable-pitch nil)
  ;;(doom-themes-treemacs-config)
  (doom-themes-org-config))


;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)
;; (setq doom-theme 'doom-dracula)
;; (setq doom-theme 'doom-solarized-light)
(setq doom-themes-dark '(doom-dracula doom-vibrant doom-city-lights doom-moonlight doom-horizon
                         doom-one doom-solarized-dark doom-palenight doom-rouge doom-spacegrey
                         doom-old-hope doom-oceanic-next doom-monokai-pro doom-material doom-henna
                         doom-ephemeral chocolate doom-zenburn doom-peacock))

(setq doom-themes-light '(doom-one-light doom-solarized-light  doom-opera-light doom-ayu-light))

(defun random-choice (items)
  "Random choice a list"
  (let* ((size (length items))
         (index (random size)))
    (nth index items)))

(defun my/apply-theme (appearance)
  "Load theme, taking current system APPEARANCE into consideration."
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (load-theme (random-choice doom-themes-light) t))
    ('dark  (load-theme (random-choice doom-themes-dark) t))
))



(after! doom-themes
  (if IS-MAC (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
  (setq doom-theme 'doom-nano-light)))




;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.

(setq display-line-numbers-type 'relative)

(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name "► Doom")

(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook! 'Info-selection-hook 'info-colors-fontify-node)
#+end_src
** dashboard
:PROPERTIES:
:ID:       24df29ee-b60d-4408-ac20-1c7c95da1918
:END:
#+begin_src emacs-lisp :tangle config.el
;; this code from https://randomgeekery.org/config/emacs/doom/

#+end_src
** global mode
:PROPERTIES:
:ID:       cd7500b9-220e-4c2d-9946-5f86248c1a7e
:END:
#+begin_src emacs-lisp :tangle config.el
(setq menu-bar-mode t)
#+end_src
* Editor
** 分词
:PROPERTIES:
:ID:       5efa8c16-ea05-491e-b9c5-5dc20137bce0
:END:

#+begin_src emacs-lisp :tangle packages.el
;;(package! jieba :recipe (:host github :repo "cireu/jieba.el"))
(package! emt :recipe (:host github :repo "roife/emt"))
#+end_src

#+begin_src emacs-lisp :tangle config.el
;;(use-package jieba
;;  :commands jieba-mode
;;  :init (jieba-mode))
(use-package emt
  :hook (after-init . emt-mode)
  :config
  (setq emt-lib-path (concat doom-emacs-dir "EMT/libEMT.dylib"))
)
#+end_src
** Meow
:PROPERTIES:
:ID:       ae971f56-8eff-42eb-a096-8a8a7febe736
:END:

#+begin_src emacs-lisp :tangle packages.el
(package! meow)
#+end_src


#+begin_src emacs-lisp :tangle config.el
(defconst meow-cheatsheet-layout-engram
  '((<TLDE> "[" "{")
    (<AE01> "1" "|")
    (<AE02> "2" "=")
    (<AE03> "3" "~")
    (<AE04> "4" "+")
    (<AE05> "5" "<")
    (<AE06> "6" ">")
    (<AE07> "7" "^")
    (<AE08> "8" "&")
    (<AE09> "9" "%")
    (<AE10> "0" "*")
    (<AE11> "]" "}")
    (<AE12> "/" "\\")
    (<AD01> "b" "B")
    (<AD02> "y" "Y")
    (<AD03> "o" "O")
    (<AD04> "u" "U")
    (<AD05> "''" "(")
    (<AD06> "\"" ")")
    (<AD07> "l" "L")
    (<AD08> "d" "D")
    (<AD09> "w" "W")
    (<AD10> "v" "v")
    (<AD11> "z" "Z")
    (<AD12> "#" "@")
    (<BKSL> "$" "`")
    (<AC01> "c" "C")
    (<AC02> "i" "i")
    (<AC03> "e" "E")
    (<AC04> "a" "A")
    (<AC05> "," ";")
    (<AC06> "." "\"")
    (<AC07> "h" "H")
    (<AC08> "t" "T")
    (<AC09> "s" "S")
    (<AC10> "n" "N")
    (<AC11> "q" "Q")
    (<AB01> "g" "G")
    (<AB02> "x" "X")
    (<AB03> "j" "J")
    (<AB04> "k" "K")
    (<AB05> "-" "_")
    (<AB06> "?" "!")
    (<AB07> "r" "R")
    (<AB08> "m" "M")
    (<AB09> "f" "f")
    (<AB10> "p" "P")
    (<LSGT> "-" "_")))

;; Leader Key
(defun meow/setup-leader ()
  (map! :leader
        "?" #'meow-cheatsheet
        "/" #'meow-keypad-describe-key
        "1" #'meow-digit-argument
        "2" #'meow-digit-argument
        "3" #'meow-digit-argument
        "4" #'meow-digit-argument
        "5" #'meow-digit-argument
        "6" #'meow-digit-argument
        "7" #'meow-digit-argument
        "8" #'meow-digit-argument
        "9" #'meow-digit-argument
        "0" #'meow-digit-argument))

;; Keypad
(defun meow/setup-keypad ()
  (map! :map meow-keypad-state-keymap
        "?" #'meow-cheatsheet
        "/" #'meow-keypad-describe-key
        "1" #'meow-digit-argument
        "2" #'meow-digit-argument
        "3" #'meow-digit-argument
        "4" #'meow-digit-argument
        "5" #'meow-digit-argument
        "6" #'meow-digit-argument
        "7" #'meow-digit-argument
        "8" #'meow-digit-argument
        "9" #'meow-digit-argument
        "0" #'meow-digit-argument
        "h" #'help-command))

(defun meow/setup ()
  (map! :map meow-normal-state-keymap
        "0" #'meow-expand-0
        "1" #'meow-expand-1
        "2" #'meow-expand-2
        "3" #'meow-expand-3
        "4" #'meow-expand-4
        "5" #'meow-expand-5
        "6" #'meow-expand-6
        "7" #'meow-expand-7
        "8" #'meow-expand-8
        "9" #'meow-expand-9
        "-" #'negative-argument
        ";" #'meow-reverse
        "," #'meow-inner-of-thing
        "." #'meow-bounds-of-thing
        "'" #'repeat
        "<escape>" #'ignore))
(defun meow/setup-engram-jd ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-engram)
  (meow/setup)
  (meow-motion-overwrite-define-key)
  (map! :leader
        :desc "Eval expression"       ";"    #'pp-eval-expression
        :desc "M-x"                   ":"    #'execute-extended-command
        :desc "Pop up scratch buffer" "x"    #'doom/open-scratch-buffer
        :desc "Org Capture"           "X"    #'org-capture
        ;; C-u is used by evil
        :desc "Universal argument"    "u"    #'universal-argument
        (:prefix-map ("w" . "window")
                     "0" #'winum-select-window-0-or-10
                     "1" #'winum-select-window-1
                     "2" #'winum-select-window-2
                     "3" #'winum-select-window-3
                     "4" #'winum-select-window-4
                     "5" #'winum-select-window-5
                     "6" #'winum-select-window-6
                     "7" #'winum-select-window-7
                     "8" #'winum-select-window-8
                     "9" #'winum-select-window-9)

        :desc "help"                  "h"    help-map

        (:when (modulep! :ui popup)
          :desc "Toggle last   popup"     "~"    #'+popup/toggle)
        :desc "Find file"             "."    #'find-file
        :desc "Switch buffer"         ","    #'switch-to-buffer
        (:when (modulep! :ui workspaces)
          :desc "Switch workspace buffer" "," #'persp-switch-to-buffer
          :desc "Switch buffer"           "<" #'switch-to-buffer)
        :desc "Switch to last buffer" "`"    #'evil-switch-to-windows-last-buffer
        :desc "Resume last search"    "'"
        (cond ((modulep! :completion vertico)    #'vertico-repeat)
              ((modulep! :completion ivy)        #'ivy-resume)
              ((modulep! :completion helm)       #'helm-resume))

        :desc "Search for symbol in project" "*" #'+default/search-project-for-symbol-at-point
        :desc "Search project"               "/" #'+default/search-project

        :desc "Find file in project"  "SPC"  #'projectile-find-file
        :desc "Jump to bookmark"      "RET"  #'bookmark-jump

      ;;; <leader> TAB --- workspace
        (:when (modulep! :ui workspaces)
          (:prefix-map ("TAB" . "workspace")
           :desc "Display tab bar"           "TAB" #'+workspace/display
           :desc "Switch workspace"          "."   #'+workspace/switch-to
           :desc "Switch to last workspace"  "`"   #'+workspace/other
           :desc "New workspace"             "n"   #'+workspace/new
           :desc "New named workspace"       "N"   #'+workspace/new-named
           :desc "Load workspace from file"  "l"   #'+workspace/load
           :desc "Save workspace to file"    "s"   #'+workspace/save
           :desc "Delete session"            "x"   #'+workspace/kill-session
           :desc "Delete this workspace"     "d"   #'+workspace/delete
           :desc "Rename workspace"          "r"   #'+workspace/rename
           :desc "Restore last session"      "R"   #'+workspace/restore-last-session
           :desc "Next workspace"            "]"   #'+workspace/switch-right
           :desc "Previous workspace"        "["   #'+workspace/switch-left
           :desc "Switch to 1st workspace"   "1"   #'+workspace/switch-to-0
           :desc "Switch to 2nd workspace"   "2"   #'+workspace/switch-to-1
           :desc "Switch to 3rd workspace"   "3"   #'+workspace/switch-to-2
           :desc "Switch to 4th workspace"   "4"   #'+workspace/switch-to-3
           :desc "Switch to 5th workspace"   "5"   #'+workspace/switch-to-4
           :desc "Switch to 6th workspace"   "6"   #'+workspace/switch-to-5
           :desc "Switch to 7th workspace"   "7"   #'+workspace/switch-to-6
           :desc "Switch to 8th workspace"   "8"   #'+workspace/switch-to-7
           :desc "Switch to 9th workspace"   "9"   #'+workspace/switch-to-8
           :desc "Switch to final workspace" "0"   #'+workspace/switch-to-final))

      ;;; <leader> b --- buffer
        (:prefix-map ("b" . "buffer")
         :desc "Toggle narrowing"            "-"   #'doom/toggle-narrow-buffer
         :desc "Previous buffer"             "["   #'previous-buffer
         :desc "Next buffer"                 "]"   #'next-buffer
         (:when (modulep! :ui workspaces)
           :desc "Switch workspace buffer" "b" #'persp-switch-to-buffer
           :desc "Switch buffer"           "B" #'switch-to-buffer
           :desc "ibuffer workspace"       "I" #'+ibuffer/open-for-current-workspace)
         (:unless (modulep! :ui workspaces)
           :desc "Switch buffer"           "b" #'switch-to-buffer)
         :desc "Clone buffer"                "c"   #'clone-indirect-buffer
         :desc "Clone buffer other window"   "C"   #'clone-indirect-buffer-other-window
         :desc "Kill buffer"                 "d"   #'kill-current-buffer
         :desc "ibuffer"                     "i"   #'ibuffer
         :desc "Kill buffer"                 "k"   #'kill-current-buffer
         :desc "Kill all buffers"            "K"   #'doom/kill-all-buffers
         :desc "Switch to last buffer"       "l"   #'evil-switch-to-windows-last-buffer
         :desc "Set bookmark"                "m"   #'bookmark-set
         :desc "Delete bookmark"             "M"   #'bookmark-delete
         :desc "Next buffer"                 "n"   #'next-buffer
         :desc "New empty buffer"            "N"   #'evil-buffer-new
         :desc "Kill other buffers"          "O"   #'doom/kill-other-buffers
         :desc "Previous buffer"             "p"   #'previous-buffer
         :desc "Revert buffer"               "r"   #'revert-buffer
         :desc "Rename buffer"               "R"   #'rename-buffer
         :desc "Save buffer"                 "s"   #'basic-save-buffer
         :desc "Save all buffers"            "S"   #'evil-write-all
         :desc "Save buffer as root"         "u"   #'doom/sudo-save-buffer
         :desc "Pop up scratch buffer"       "x"   #'doom/open-scratch-buffer
         :desc "Switch to scratch buffer"    "X"   #'doom/switch-to-scratch-buffer
         :desc "Yank buffer"                 "y"   #'+default/yank-buffer-contents
         :desc "Bury buffer"                 "z"   #'bury-buffer
         :desc "Kill buried buffers"         "Z"   #'doom/kill-buried-buffers)

      ;;; <leader> c --- code
        (:prefix-map ("c" . "code")
                     (:when (and (modulep! :tools lsp) (not (modulep! :tools lsp +eglot)))
                       :desc "LSP Execute code action" "a" #'lsp-execute-code-action
                       :desc "LSP Organize imports" "o" #'lsp-organize-imports
                       (:when (modulep! :completion ivy)
                         :desc "Jump to symbol in current workspace" "j"   #'lsp-ivy-workspace-symbol
                         :desc "Jump to symbol in any workspace"     "J"   #'lsp-ivy-global-workspace-symbol)
                       (:when (modulep! :completion helm)
                         :desc "Jump to symbol in current workspace" "j"   #'helm-lsp-workspace-symbol
                         :desc "Jump to symbol in any workspace"     "J"   #'helm-lsp-global-workspace-symbol)
                       (:when (modulep! :completion vertico)
                         :desc "Jump to symbol in current workspace" "j"   #'consult-lsp-symbols
                         :desc "Jump to symbol in any workspace"     "J"   (cmd!! #'consult-lsp-symbols 'all-workspaces))
                       (:when (modulep! :ui treemacs +lsp)
                         :desc "Errors list"                         "X"   #'lsp-treemacs-errors-list
                         :desc "Incoming call hierarchy"             "y"   #'lsp-treemacs-call-hierarchy
                         :desc "Outgoing call hierarchy"             "Y"   (cmd!! #'lsp-treemacs-call-hierarchy t)
                         :desc "References tree"                     "R"   (cmd!! #'lsp-treemacs-references t)
                         :desc "Symbols"                             "S"   #'lsp-treemacs-symbols)
                       :desc "LSP"                                 "l"   #'+default/lsp-command-map
                       :desc "LSP Rename"                          "r"   #'lsp-rename)
                     (:when (modulep! :tools lsp +eglot)
                       :desc "LSP Execute code action" "a" #'eglot-code-actions
                       :desc "LSP Rename" "r" #'eglot-rename
                       :desc "LSP Find declaration"                 "j"   #'eglot-find-declaration
                       (:when (modulep! :completion vertico)
                         :desc "Jump to symbol in current workspace" "j"   #'consult-eglot-symbols))
                     :desc "Compile"                               "c"   #'compile
                     :desc "Recompile"                             "C"   #'recompile
                     :desc "Jump to definition"                    "d"   #'+lookup/definition
                     :desc "Jump to references"                    "D"   #'+lookup/references
                     :desc "Evaluate buffer/region"                "e"   #'+eval/buffer-or-region
                     :desc "Evaluate & replace region"             "E"   #'+eval:replace-region
                     :desc "Format buffer/region"                  "f"   #'+format/region-or-buffer
                     :desc "Find implementations"                  "i"   #'+lookup/implementations
                     :desc "Jump to documentation"                 "k"   #'+lookup/documentation
                     :desc "Send to repl"                          "s"   #'+eval/send-region-to-repl
                     :desc "Find type definition"                  "t"   #'+lookup/type-definition
                     :desc "Delete trailing whitespace"            "w"   #'delete-trailing-whitespace
                     :desc "Delete trailing newlines"              "W"   #'doom/delete-trailing-newlines
                     :desc "List errors"                           "x"   #'+default/diagnostics)

      ;;; <leader> f --- file
        (:prefix-map ("f" . "file")
         :desc "Open project editorconfig"   "c"   #'editorconfig-find-current-editorconfig
         :desc "Copy this file"              "C"   #'doom/copy-this-file
         :desc "Find directory"              "d"   #'+default/dired
         :desc "Delete this file"            "D"   #'doom/delete-this-file
         :desc "Find file in emacs.d"        "e"   #'doom/find-file-in-emacsd
         :desc "Browse emacs.d"              "E"   #'doom/browse-in-emacsd
         :desc "Find file"                   "f"   #'find-file
         :desc "Find file from here"         "F"   #'+default/find-file-under-here
         :desc "Locate file"                 "l"   #'locate
         :desc "Find file in private config" "p"   #'doom/find-file-in-private-config
         :desc "Browse private config"       "P"   #'doom/open-private-config
         :desc "Recent files"                "r"   #'recentf-open-files
         :desc "Rename/move file"            "R"   #'doom/move-this-file
         :desc "Save file"                   "s"   #'save-buffer
         :desc "Save file as..."             "S"   #'write-file
         :desc "Sudo find file"              "u"   #'doom/sudo-find-file
         :desc "Sudo this file"              "U"   #'doom/sudo-this-file
         :desc "Yank file path"              "y"   #'+default/yank-buffer-path
         :desc "Yank file path from project" "Y"   #'+default/yank-buffer-path-relative-to-project)

      ;;; <leader> g --- git/version control
        (:prefix-map ("g" . "git")
         :desc "Revert file"                 "R"   #'vc-revert
         :desc "Copy link to remote"         "y"   #'+vc/browse-at-remote-kill
         :desc "Copy link to homepage"       "Y"   #'+vc/browse-at-remote-kill-homepage
         (:when (modulep! :ui hydra)
           :desc "SMerge"                    "m"   #'+vc/smerge-hydra/body)
         (:when (modulep! :ui vc-gutter)
           (:when (modulep! :ui hydra)
             :desc "VCGutter"                "."   #'+vc/gutter-hydra/body)
           :desc "Revert hunk at point"      "r"   #'+vc-gutter/revert-hunk
           :desc "stage hunk at point"       "s"   #'+vc-gutter/stage-hunk
           :desc "Git time machine"          "t"   #'git-timemachine-toggle
           :desc "Jump to next hunk"         "]"   #'+vc-gutter/next-hunk
           :desc "Jump to previous hunk"     "["   #'+vc-gutter/previous-hunk)
         (:when (modulep! :tools magit)
           :desc "Magit dispatch"            "/"   #'magit-dispatch
           :desc "Magit file dispatch"       "."   #'magit-file-dispatch
           :desc "Forge dispatch"            "'"   #'forge-dispatch
           :desc "Magit switch branch"       "b"   #'magit-branch-checkout
           :desc "Magit status"              "g"   #'magit-status
           :desc "Magit status here"         "G"   #'magit-status-here
           :desc "Magit file delete"         "D"   #'magit-file-delete
           :desc "Magit blame"               "B"   #'magit-blame-addition
           :desc "Magit clone"               "C"   #'magit-clone
           :desc "Magit fetch"               "F"   #'magit-fetch
           :desc "Magit buffer log"          "L"   #'magit-log-buffer-file
           :desc "Git stage file"            "S"   #'magit-stage-file
           :desc "Git unstage file"          "U"   #'magit-unstage-file
           (:prefix ("f" . "find")
            :desc "Find file"                 "f"   #'magit-find-file
            :desc "Find gitconfig file"       "g"   #'magit-find-git-config-file
            :desc "Find commit"               "c"   #'magit-show-commit
            :desc "Find issue"                "i"   #'forge-visit-issue
            :desc "Find pull request"         "p"   #'forge-visit-pullreq)
           (:prefix ("o" . "open in browser")
            :desc "Browse file or region"     "o"   #'+vc/browse-at-remote
            :desc "Browse homepage"           "h"   #'+vc/browse-at-remote-homepage
            :desc "Browse remote"             "r"   #'forge-browse-remote
            :desc "Browse commit"             "c"   #'forge-browse-commit
            :desc "Browse an issue"           "i"   #'forge-browse-issue
            :desc "Browse a pull request"     "p"   #'forge-browse-pullreq
            :desc "Browse issues"             "I"   #'forge-browse-issues
            :desc "Browse pull requests"      "P"   #'forge-browse-pullreqs)
           (:prefix ("l" . "list")
                    (:when (modulep! :tools gist)
                      :desc "List gists"              "g"   #'+gist:list)
                    :desc "List repositories"         "r"   #'magit-list-repositories
                    :desc "List submodules"           "s"   #'magit-list-submodules
                    :desc "List issues"               "i"   #'forge-list-issues
                    :desc "List pull requests"        "p"   #'forge-list-pullreqs
                    :desc "List notifications"        "n"   #'forge-list-notifications)
           (:prefix ("c" . "create")
            :desc "Initialize repo"           "r"   #'magit-init
            :desc "Clone repo"                "R"   #'magit-clone
            :desc "Commit"                    "c"   #'magit-commit-create
            :desc "Fixup"                     "f"   #'magit-commit-fixup
            :desc "Branch"                    "b"   #'magit-branch-and-checkout
            :desc "Issue"                     "i"   #'forge-create-issue
            :desc "Pull request"              "p"   #'forge-create-pullreq)))

      ;;; <leader> i --- insert
        (:prefix-map ("i" . "insert")
                     (:when (> emacs-major-version 28)
                       :desc "Emoji"                       "e"   #'emoji-search)
                     (:when (modulep! :ui emoji)
                       :desc "Emoji"                       "e"   #'emojify-insert-emoji)
                     :desc "Current file name"             "f"   #'+default/insert-file-path
                     :desc "Current file path"             "F"   (cmd!! #'+default/insert-file-path t)
                     :desc "Evil ex path"                  "p"   (cmd! (evil-ex "R!echo "))
                     :desc "From evil register"            "r"   #'evil-show-registers
                     :desc "Snippet"                       "s"   #'yas-insert-snippet
                     :desc "Unicode"                       "u"   #'insert-char
                     :desc "From clipboard"                "y"   #'+default/yank-pop)

      ;;; <leader> l --- live share/collab
      ;;; TODO Do you like this location for this map? This was the best idea we
      ;;; could come up with, but we're happy to move it if there's a better
      ;;; place! Also not sure if we're allowed to say "live share" since that's
      ;;; a blatant ripoff of VS Code's name for this feature
        (:when (modulep! :tools collab)
          (:prefix-map ("l" . "live share/collab")
           :desc "Switch to a shared buffer"      "b"   #'crdt-switch-to-buffer
           :desc "Connect to a session"           "c"   #'crdt-connect
           :desc "Disconnect from session"        "d"   #'crdt-disconnect
           :desc "Toggle following user's cursor" "f"   #'crdt-follow-user
           :desc "Stop following user if any"     "F"   #'crdt-stop-follow
           :desc "Goto another user's cursor"     "g"   #'crdt-goto-user
           :desc "List shared buffers"            "i"   #'crdt-list-buffers
           :desc "Kick a user (host only)"        "k"   #'crdt-kill-user
           :desc "List sessions"                  "l"   #'crdt-list-sessions
           :desc "Share current buffer"           "s"   #'crdt-share-buffer
           :desc "Stop sharing current buffer"    "S"   #'crdt-stop-share-buffer
           :desc "List connected users"           "u"   #'crdt-list-users
           :desc "Stop a session (host only)"     "x"   #'crdt-stop-session
           :desc "Copy URL of current session"    "y"   #'crdt-copy-url
           :desc "Goto next user's cursor"        "]"   #'crdt-goto-next-user
           :desc "Goto previous user's cursor"    "["   #'crdt-goto-prev-user))

      ;;; <leader> n --- notes
        (:prefix-map ("n" . "notes")
         :desc "Search notes for symbol"      "*" #'+default/search-notes-for-symbol-at-point
         :desc "Org agenda"                   "a" #'org-agenda
         (:when (modulep! :tools biblio)
           :desc "Bibliographic notes"        "b"
           (cond ((modulep! :completion vertico)  #'citar-open-notes)
                 ((modulep! :completion ivy)      #'ivy-bibtex)
                 ((modulep! :completion helm)     #'helm-bibtex)))

         :desc "Toggle last org-clock"        "c" #'+org/toggle-last-clock
         :desc "Cancel current org-clock"     "C" #'org-clock-cancel
         :desc "Open deft"                    "d" #'deft
         (:when (modulep! :lang org +noter)
           :desc "Org noter"                  "e" #'org-noter)

         :desc "Find file in notes"           "f" #'+default/find-in-notes
         :desc "Browse notes"                 "F" #'+default/browse-notes
         :desc "Org store link"               "l" #'org-store-link
         :desc "Tags search"                  "m" #'org-tags-view
         :desc "Org capture"                  "n" #'org-capture
         :desc "Goto capture"                 "N" #'org-capture-goto-target
         :desc "Active org-clock"             "o" #'org-clock-goto
         :desc "Todo list"                    "t" #'org-todo-list
         :desc "Search notes"                 "s" #'+default/org-notes-search
         :desc "Search org agenda headlines"  "S" #'+default/org-notes-headlines
         :desc "View search"                  "v" #'org-search-view
         :desc "Org export to clipboard"        "y" #'+org/export-to-clipboard
         :desc "Org export to clipboard as RTF" "Y" #'+org/export-to-clipboard-as-rich-text

         (:when (modulep! :lang org +roam)
           (:prefix ("r" . "roam")
            :desc "Switch to buffer"              "b" #'org-roam-switch-to-buffer
            :desc "Org Roam Capture"              "c" #'org-roam-capture
            :desc "Find file"                     "f" #'org-roam-find-file
            :desc "Show graph"                    "g" #'org-roam-graph
            :desc "Insert"                        "i" #'org-roam-insert
            :desc "Insert (skipping org-capture)" "I" #'org-roam-insert-immediate
            :desc "Org Roam"                      "r" #'org-roam
            (:prefix ("d" . "by date")
             :desc "Arbitrary date" "d" #'org-roam-dailies-find-date
             :desc "Today"          "t" #'org-roam-dailies-find-today
             :desc "Tomorrow"       "m" #'org-roam-dailies-find-tomorrow
             :desc "Yesterday"      "y" #'org-roam-dailies-find-yesterday)))

         (:when (modulep! :lang org +roam2)
           (:prefix ("r" . "roam")
            :desc "Open random node"           "a" #'org-roam-node-random
            :desc "Find node"                  "f" #'org-roam-node-find
            :desc "Find ref"                   "F" #'org-roam-ref-find
            :desc "Show graph"                 "g" #'org-roam-graph
            :desc "Insert node"                "i" #'org-roam-node-insert
            :desc "Capture to node"            "n" #'org-roam-capture
            :desc "Toggle roam buffer"         "r" #'org-roam-buffer-toggle
            :desc "Launch roam buffer"         "R" #'org-roam-buffer-display-dedicated
            :desc "Sync database"              "s" #'org-roam-db-sync
            (:prefix ("d" . "by date")
             :desc "Goto previous note"        "b" #'org-roam-dailies-goto-previous-note
             :desc "Goto date"                 "d" #'org-roam-dailies-goto-date
             :desc "Capture date"              "D" #'org-roam-dailies-capture-date
             :desc "Goto next note"            "f" #'org-roam-dailies-goto-next-note
             :desc "Goto tomorrow"             "m" #'org-roam-dailies-goto-tomorrow
             :desc "Capture tomorrow"          "M" #'org-roam-dailies-capture-tomorrow
             :desc "Capture today"             "n" #'org-roam-dailies-capture-today
             :desc "Goto today"                "t" #'org-roam-dailies-goto-today
             :desc "Capture today"             "T" #'org-roam-dailies-capture-today
             :desc "Goto yesterday"            "y" #'org-roam-dailies-goto-yesterday
             :desc "Capture yesterday"         "Y" #'org-roam-dailies-capture-yesterday
             :desc "Find directory"            "-" #'org-roam-dailies-find-directory)))

         (:when (modulep! :lang org +journal)
           (:prefix ("j" . "journal")
            :desc "New Entry"           "j" #'org-journal-new-entry
            :desc "New Scheduled Entry" "J" #'org-journal-new-scheduled-entry
            :desc "Search Forever"      "s" #'org-journal-search-forever)))

      ;;; <leader> o --- open
        (:prefix-map  ("o" . "open")
         :desc "Org agenda"       "A"  #'org-agenda
         (:prefix ("a" . "org agenda")
          :desc "Agenda"         "a"  #'org-agenda
          :desc "Todo list"      "t"  #'org-todo-list
          :desc "Tags search"    "m"  #'org-tags-view
          :desc "View search"    "v"  #'org-search-view)
         :desc "Default browser"    "b"  #'browse-url-of-file
         :desc "Start debugger"     "d"  #'+debugger/start
         :desc "New frame"          "f"  #'make-frame
         :desc "Select frame"       "F"  #'select-frame-by-name
         :desc "REPL"               "r"  #'+eval/open-repl-other-window
         :desc "REPL (same window)" "R"  #'+eval/open-repl-same-window
         :desc "Dired"              "-"  #'dired-jump
         (:when (modulep! :ui neotree)
           :desc "Project sidebar"              "p" #'+neotree/open
           :desc "Find file in project sidebar" "P" #'+neotree/find-this-file)
         (:when (modulep! :ui treemacs)
           :desc "Project sidebar" "p" #'+treemacs/toggle
           :desc "Find file in project sidebar" "P" #'treemacs-find-file)
         (:when (modulep! :term shell)
           :desc "Toggle shell popup"    "t" #'+shell/toggle
           :desc "Open shell here"       "T" #'+shell/here)
         (:when (modulep! :term term)
           :desc "Toggle terminal popup" "t" #'+term/toggle
           :desc "Open terminal here"    "T" #'+term/here)
         (:when (modulep! :term vterm)
           :desc "Toggle vterm popup"    "t" #'+vterm/toggle
           :desc "Open vterm here"       "T" #'+vterm/here)
         (:when (modulep! :term eshell)
           :desc "Toggle eshell popup"   "e" #'+eshell/toggle
           :desc "Open eshell here"      "E" #'+eshell/here)
         (:when (modulep! :os macos)
           :desc "Reveal in Finder"           "o" #'+macos/reveal-in-finder
           :desc "Reveal project in Finder"   "O" #'+macos/reveal-project-in-finder
           :desc "Send to Transmit"           "u" #'+macos/send-to-transmit
           :desc "Send project to Transmit"   "U" #'+macos/send-project-to-transmit
           :desc "Send to Launchbar"          "l" #'+macos/send-to-launchbar
           :desc "Send project to Launchbar"  "L" #'+macos/send-project-to-launchbar
           :desc "Open in iTerm"              "i" #'+macos/open-in-iterm
           :desc "Open in new iTerm window"   "I" #'+macos/open-in-iterm-new-window)
         (:when (modulep! :tools docker)
           :desc "Docker" "D" #'docker)
         (:when (modulep! :email mu4e)
           :desc "mu4e" "m" #'=mu4e)
         (:when (modulep! :email notmuch)
           :desc "notmuch" "m" #'=notmuch)
         (:when (modulep! :email wanderlust)
           :desc "wanderlust" "m" #'=wanderlust))

      ;;; <leader> p --- project
        (:prefix-map ("p" . "project")
         :desc "Browse project"               "." #'+default/browse-project
         :desc "Browse other project"         ">" #'doom/browse-in-other-project
         :desc "Run cmd in project root"      "!" #'projectile-run-shell-command-in-root
         :desc "Async cmd in project root"    "&" #'projectile-run-async-shell-command-in-root
         :desc "Add new project"              "a" #'projectile-add-known-project
         :desc "Switch to project buffer"     "b" #'projectile-switch-to-buffer
         :desc "Compile in project"           "c" #'projectile-compile-project
         :desc "Repeat last command"          "C" #'projectile-repeat-last-command
         :desc "Remove known project"         "d" #'projectile-remove-known-project
         :desc "Discover projects in folder"  "D" #'+default/discover-projects
         :desc "Edit project .dir-locals"     "e" #'projectile-edit-dir-locals
         :desc "Find file in project"         "f" #'projectile-find-file
         :desc "Find file in other project"   "F" #'doom/find-file-in-other-project
         :desc "Configure project"            "g" #'projectile-configure-project
         :desc "Invalidate project cache"     "i" #'projectile-invalidate-cache
         :desc "Kill project buffers"         "k" #'projectile-kill-buffers
         :desc "Find other file"              "o" #'projectile-find-other-file
         :desc "Switch project"               "p" #'projectile-switch-project
         :desc "Find recent project files"    "r" #'projectile-recentf
         :desc "Run project"                  "R" #'projectile-run-project
         :desc "Save project files"           "s" #'projectile-save-project-buffers
         :desc "List project todos"           "t" #'magit-todos-list
         :desc "Test project"                 "T" #'projectile-test-project
         :desc "Pop up scratch buffer"        "x" #'doom/open-project-scratch-buffer
         :desc "Switch to scratch buffer"     "X" #'doom/switch-to-project-scratch-buffer
         (:when (and (modulep! :tools taskrunner)
                     (or (modulep! :completion ivy)
                         (modulep! :completion helm)))
           :desc "List project tasks"          "z" #'+taskrunner/project-tasks))

      ;;; <leader> q --- quit/session
        (:prefix-map ("q" . "quit/session")
         :desc "Restart emacs server"         "d" #'+default/restart-server
         :desc "Delete frame"                 "f" #'delete-frame
         :desc "Clear current frame"          "F" #'doom/kill-all-buffers
         :desc "Kill Emacs (and daemon)"      "K" #'save-buffers-kill-emacs
         :desc "Quit Emacs"                   "q" #'save-buffers-kill-terminal
         :desc "Quit Emacs without saving"    "Q" #'evil-quit-all-with-error-code
         :desc "Quick save current session"   "s" #'doom/quicksave-session
         :desc "Restore last session"         "l" #'doom/quickload-session
         :desc "Save session to file"         "S" #'doom/save-session
         :desc "Restore session from file"    "L" #'doom/load-session
         :desc "Restart & restore Emacs"      "r" #'doom/restart-and-restore
         :desc "Restart Emacs"                "R" #'doom/restart)

      ;;; <leader> r --- remote
        (:when (modulep! :tools upload)
          (:prefix-map ("r" . "remote")
           :desc "Browse remote"              "b" #'ssh-deploy-browse-remote-base-handler
           :desc "Browse relative"            "B" #'ssh-deploy-browse-remote-handler
           :desc "Download remote"            "d" #'ssh-deploy-download-handler
           :desc "Delete local & remote"      "D" #'ssh-deploy-delete-handler
           :desc "Eshell base terminal"       "e" #'ssh-deploy-remote-terminal-eshell-base-handler
           :desc "Eshell relative terminal"   "E" #'ssh-deploy-remote-terminal-eshell-handler
           :desc "Move/rename local & remote" "m" #'ssh-deploy-rename-handler
           :desc "Open this file on remote"   "o" #'ssh-deploy-open-remote-file-handler
           :desc "Run deploy script"          "s" #'ssh-deploy-run-deploy-script-handler
           :desc "Upload local"               "u" #'ssh-deploy-upload-handler
           :desc "Upload local (force)"       "U" #'ssh-deploy-upload-handler-forced
           :desc "Diff local & remote"        "x" #'ssh-deploy-diff-handler
           :desc "Browse remote files"        "." #'ssh-deploy-browse-remote-handler
           :desc "Detect remote changes"      ">" #'ssh-deploy-remote-changes-handler))

      ;;; <leader> s --- search
        (:prefix-map ("s" . "search")
         :desc "Search buffer"                "b"
         (cond ((modulep! :completion vertico)   #'+default/search-buffer)
               ((modulep! :completion ivy)       #'swiper)
               ((modulep! :completion helm)      #'swiper))
         :desc "Search all open buffers"      "B"
         (cond ((modulep! :completion vertico)   (cmd!! #'consult-line-multi 'all-buffers))
               ((modulep! :completion ivy)       #'swiper-all)
               ((modulep! :completion helm)      #'swiper-all))
         :desc "Search current directory"     "d" #'+default/search-cwd
         :desc "Search other directory"       "D" #'+default/search-other-cwd
         :desc "Search .emacs.d"              "e" #'+default/search-emacsd
         :desc "Locate file"                  "f" #'locate
         :desc "Jump to symbol"               "i" #'imenu
         :desc "Jump to symbol in open buffers" "I"
         (cond ((modulep! :completion vertico)   #'consult-imenu-multi)
               ((modulep! :completion helm)      #'helm-imenu-in-all-buffers))
         :desc "Jump to visible link"         "l" #'link-hint-open-link
         :desc "Jump to link"                 "L" #'ffap-menu
         :desc "Jump list"                    "j" #'evil-show-jumps
         :desc "Jump to bookmark"             "m" #'bookmark-jump
         :desc "Look up online"               "o" #'+lookup/online
         :desc "Look up online (w/ prompt)"   "O" #'+lookup/online-select
         :desc "Look up in local docsets"     "k" #'+lookup/in-docsets
         :desc "Look up in all docsets"       "K" #'+lookup/in-all-docsets
         :desc "Search project"               "p" #'+default/search-project
         :desc "Search other project"         "P" #'+default/search-other-project
         :desc "Jump to mark"                 "r" #'evil-show-marks
         :desc "Search buffer"                "s" #'+default/search-buffer
         :desc "Search buffer for thing at point" "S"
         (cond ((modulep! :completion vertico)   #'+vertico/search-symbol-at-point)
               ((modulep! :completion ivy)       #'swiper-isearch-thing-at-point)
               ((modulep! :completion helm)      #'swiper-isearch-thing-at-point))
         :desc "Dictionary"                   "t" #'+lookup/dictionary-definition
         :desc "Thesaurus"                    "T" #'+lookup/synonyms
         (:when (fboundp 'vundo)
           :desc "Undo history"               "u" #'vundo))

      ;;; <leader> t --- toggle
        (:prefix-map ("t" . "toggle")
         :desc "Big mode"                     "b" #'doom-big-font-mode
         :desc "Fill Column Indicator"        "c" #'global-display-fill-column-indicator-mode
         :desc "Flymake"                      "f" #'flymake-mode
         (:when (and (modulep! :checkers syntax)
                     (not (modulep! :checkers syntax +flymake)))
           :desc "Flycheck"                   "f" #'flycheck-mode)
         :desc "Frame fullscreen"             "F" #'toggle-frame-fullscreen
         :desc "Evil goggles"                 "g" #'evil-goggles-mode
         (:when (modulep! :ui indent-guides)
           :desc "Indent guides"              "i" #'highlight-indent-guides-mode)
         :desc "Indent style"                 "I" #'doom/toggle-indent-style
         :desc "Line numbers"                 "l" #'doom/toggle-line-numbers
         (:when (modulep! :ui minimap)
           :desc "Minimap"                      "m" #'minimap-mode)
         (:when (modulep! :lang org +present)
           :desc "org-tree-slide mode"        "p" #'org-tree-slide-mode)
         :desc "Read-only mode"               "r" #'read-only-mode
         (:when (and (modulep! :checkers spell) (not (modulep! :checkers spell +flyspell)))
           :desc "Spell checker"              "s" #'spell-fu-mode)
         (:when (modulep! :checkers spell +flyspell)
           :desc "Spell checker"              "s" #'flyspell-mode)
         (:when (modulep! :lang org +pomodoro)
           :desc "Pomodoro timer"             "t" #'org-pomodoro)
         :desc "Visible mode"                 "v" #'visible-mode
         :desc "Soft line wrapping"           "w" #'visual-line-mode
         (:when (modulep! :editor word-wrap)
           :desc "Soft line wrapping"         "w" #'+word-wrap-mode)
         (:when (modulep! :ui zen)
           :desc "Zen mode"                   "z" #'+zen/toggle
           :desc "Zen mode (fullscreen)"      "Z" #'+zen/toggle-fullscreen)) )
  (map! :map meow-normal-state-keymap
        "0" #'meow-expand-0
        "1" #'meow-expand-1
        "2" #'meow-expand-2
        "3" #'meow-expand-3
        "4" #'meow-expand-4
        "5" #'meow-expand-5
        "6" #'meow-expand-6
        "7" #'meow-expand-7
        "8" #'meow-expand-8
        "9" #'meow-expand-9
        "-" #'negative-argument
        ";" #'meow-reverse
        "," #'meow-inner-of-thing
        "." #'meow-bounds-of-thing
        "[" #'meow-beginning-of-thing
        "]" #'meow-end-of-thing
        "/" #'meow-visit
        "a" #'meow-append
        "A" #'meow-open-below
        "b" #'meow-back-word
        "B" #'meow-back-symbol
        "c" #'meow-change
        "C" #'meow-cancel
        "d" #'meow-delete
        "D" #'meow-backward-delete
        "e" #'meow-next-word
        "E" #'meow-next-symbol
        "f" #'meow-right
        "f" #'meow-right-expand
        "g" #'meow-cancel-selection
        "G" #'meow-grab
        "h" #'meow-head
        "H" #'meow-head-expand
        "i" #'meow-insert
        "I" #'meow-open-above
        "j" #'meow-join
        "J" #'meow-join-sexp
        "k" #'meow-kill
        "K" #'meow-keypad
        "l" #'meow-line
        "L" #'meow-goto-line
        "m" #'meow-mark-word
        "M" #'meow-mark-symbol
        "n" #'meow-next
        "N" #'meow-next-expand
        "o" #'meow-block
        "O" #'meow-to-block
        "p" #'meow-prev
        "P" #'meow-prev-expand
        "q" #'meow-quit
        "r" #'meow-replace
        "r" #'meow-swap-grab
        "s" #'meow-save
        "S" #'meow-search
        "t" #'meow-till
        "T" #'meow-find
        "u" #'meow-undo
        "U" #'meow-undo-in-selection
        "v" #'meow-visit
        ;;'("W" . meow-next-symbol)
        "x" #'meow-M-x

        ;;'("X" . meow-backward-delete)
        "y" #'meow-yank
        "Y" #'meow-sync-grab
        "z" #'meow-pop-selection
        "'" #'repeat
        "\\" #'qutoed-insert
        "<escape>" #'ignore)
  )


(use-package! meow
  :demand t
  :config
  (meow/setup-engram-jd)
  (setq meow-use-clipboard t)
  (map! :map meow-normal-state-keymap
        doom-leader-key doom-leader-map)
  (map! :map meow-motion-state-keymap
        doom-leader-key doom-leader-map)
  (map! :map meow-beacon-state-keymap
        doom-leader-key nil)
  (meow/setup-leader)
  (meow/setup-keypad)
  (map! :map meow-keymap [remap describe-key] #'helpful-key)
  (meow-global-mode 1)
  )
#+end_src

** save
:PROPERTIES:
:ID:       0e0c8caf-e9a6-43b4-b393-e502b9ef7511
:END:
#+begin_src emacs-lisp :tangle config.el
(setq auto-save-default t)
#+end_src
** Directory/File

#+begin_src emacs-lisp :tangle packages.el
#+end_src


#+begin_src emacs-lisp :tangle config.el
#+end_src
* Biblio
** init biblio
:PROPERTIES:
:ID:       6d187859-ed0e-4994-8651-0744708518c5
:END:
#+begin_src emacs-lisp :tangle config.el

(setq my/bib (concat "~/org/" "academic.bib"))
(setq my/notes (concat "~/org/" "references"))
(setq my/library-files "~/Documents/org-pdfs")
#+end_src
** zotero
:PROPERTIES:
:ID:       7d0676d7-b53d-4d62-9a1b-bbb49f7a06a7
:END:

#+begin_src emacs-lisp :tangle packages.el
;; (package! zotxt)
#+end_src
** ebib
:PROPERTIES:
:ID:       7836596d-a800-473d-9b3f-1479562dcbe4
:END:
#+begin_src emacs-lisp :tangle packages.el
;;(package! ebib)
#+end_src
** org-ref
:PROPERTIES:
:ID:       169a5d75-2f84-407b-a18e-844701c58ddc
:END:
#+begin_src emacs-lisp :tangle packages.el
(package! org-ref)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package org-ref)
#+end_src

** bibtex-completion
:PROPERTIES:
:ID:       eca0c369-5074-473a-9a55-724e47bafc60
:END:
#+begin_src emacs-lisp :tangle packages.el
;;(package! bibtex-completion)
#+end_src


#+begin_src emacs-lisp :tangle config.el
;;(use-package! bibtex-completion
;;  :config
;;  (setq
;;  bibtex-completion-bibliography my/bib
;;  bibtex-completion-pdf-field "file"
;;  bibtex-completion-notes-path my/notes
;;  bibtex-completion-additional-search-fields '(keywords)
;;  bibtex-completion-display-formats
;;	'((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
;;	  (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
;;	  (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
;;	  (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
;;	  (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}")))
;;  bibtex-completion-notes-template-multiple-files
;;    (concat
;;    "#+TITLE: ${title}\n"
;;    "#+filetags: ${keywords}\n"
;;    "* TODO Notes\n"
;;    ":PROPERTIES:\n"
;;    ":ID: ${=key=}\n"
;;    ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
;;    ":AUTHOR: ${author-abbrev}\n"
;;    ":JOURNAL: ${journaltitle}\n"
;;    ":DATE: ${date}\n"
;;    ":YEAR: ${year}\n"
;;    ":DOI: ${doi}\n"
;;    ":URL: ${url}\n"
;;    ":END:\n\n")
;;)


#+end_src
** citar
:PROPERTIES:
:ID:       108a861b-bfd8-4e47-b634-4ead3d291b4e
:END:
citar need vertico
#+begin_src emacs-lisp conf :tangle packages.el

(package! citar)
(package! embark)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! citar
  :config
  (setq citar-bibliography my/bib
        citar-notes-paths '("~/org/references/")
        )

  (setq
   org-cite-insert-processor 'citar
   org-cite-follow-processor 'citar
   org-cite-activate-processor 'citar

   citar-default-action 'citar-open-notes

   citar-at-point-function 'citar-dwim

   citar-file-note-org-include '(org-id org-roam-ref))
  (setq citar-templates
        '((main . "${author editor:30}     ${date year issued:4}     ${title:55}")
          (suffix . "  ${tags keywords:40}")
          (preview . "${author editor} ${title}, ${journal publisher container-title collection-title booktitle} ${volume} (${year issued date}).\n")
          (note .
                "${title}\n#+filetags: :references:
- bibliography ::
- tags :: ${tags}
- keywords :: ${keywords}
- previous work :: \n* Notes
:PROPERTIES:
:Custom_ID: ${=key=}
:URL: ${url}
:AUTHOR: ${author}
:NOTER_DOCUMENT: ${file}
:NOTER_PAGE:
:NOANKI: t
:END:"
                ))))

(use-package! citar-embark
  :after citar embark
  :config (citar-embark-mode)
  )
#+end_src
** org roam bibtex
:PROPERTIES:
:ID:       e6370510-1fce-426e-a6de-2930e7ed855f
:END:
#+begin_src emacs-lisp :tangle packages.el
;; interact with org-roam and bibtex
(package! org-roam-bibtex)

;; doom support
;;(package! citar-org-roam
;;     :recipe (:host github :repo "emacs-citar/citar-org-roam"
;;           :files ("*.el")))

#+end_src


#+begin_src emacs-lisp conf :tangle config.el
;; Org-Roam-Bibtex
(use-package! org-roam-bibtex
 :after org-roam
 :hook
 (org-mode . org-roam-bibtex-mode)
 :custom
 (orb-note-actions-interface 'default)
 :config
 (setq
  orb-preformat-keywords
  '("citekey" "title" "url" "file" "author-or-editor" "keywords")
  orb-insert-link-description 'title
  orb-roam-ref-format 'org-cite ;; using org ref version3
  orb-process-file-keyword t
  orb-attached-file-extensions '("pdf")
  org-cite-insert-processor 'citar
  org-cite-follow-processor 'citar
  org-cite-activate-processor 'citar
  citar-at-point-function 'embark-act
  citar-file-note-org-include '(org-id org-roam-ref)
  orb-insert-generic-candidates-format '("title" "author-or-editor" "keyword"))
 (add-to-list 'org-roam-capture-templates
                ;; bibliography note template
                '("r" "bibliography reference" plain
                 (file  "~/org/templates/orb_template.org")
                 :if-new
                 (file+head "references/${citekey}.org" "#+title: ${title}\n#+filetags: :references:\n")
                 :unnarrowed t))
 (add-to-list 'org-roam-capture-templates
              '("s" "short bibliography reference (no id)"
                  entry "* ${title} [cite:@%^{citekey}]\n%?"
                 :target (node "b93ffb0a-9383-4255-80ed-1142639fa458")
                 :unnarrowed t
                 :empty-lines-before 1
                 :prepend t))
)


(use-package! citar-org-roam
  :after citar org-roam
  :hook (org-roam-mode . citar-org-roam-mode)
  :config
  (setq citar-org-roam-note-title-template (cdr (assoc 'note citar-templates)))
)
#+end_src

* org mode
** org latex
*** packages
:PROPERTIES:
:ID:       fda2f1d9-613c-4c98-a199-ed5c7663bc65
:END:
#+begin_src emacs-lisp :tangle packages.el

(package! org :recipe
  (:host nil :repo "https://git.tecosaur.net/mirrors/org-mode.git" :remote "mirror" :fork
         (:host nil :repo "https://git.tecosaur.net/tec/org-mode.git" :branch "dev" :remote "tecosaur")
         :files
         (:defaults "etc")
         :build t :pre-build
         (with-temp-file "org-version.el"
           (require 'lisp-mnt)
           (let
               ((version
                 (with-temp-buffer
                   (insert-file-contents "lisp/org.el")
                   (lm-header "version")))
                (git-version
                 (string-trim
                  (with-temp-buffer
                    (call-process "git" nil t nil "rev-parse" "--short" "HEAD")
                    (buffer-string)))))
             (insert
              (format "(defun org-release () \"The release version of Org.\" %S)\n" version)
              (format "(defun org-git-version () \"The truncate git commit hash of Org mode.\" %S)\n" git-version)
              "(provide 'org-version)\n"))))
  :pin nil)

(unpin! org)
#+end_src
*** config
#+begin_src emacs-lisp
(use-package org-latex-preview
  :config
  ;; Increase preview width
  (plist-put org-latex-preview-appearance-options
             :page-width 0.8)

  ;; Use dvisvgm to generate previews
  ;; You don't need this, it's the default:
  (setq org-latex-preview-process-default 'dvisvgm)

  ;; Turn on auto-mode, it's built into Org and much faster/more featured than
  ;; org-fragtog. (Remember to turn off/uninstall org-fragtog.)
  (add-hook 'org-mode-hook 'org-latex-preview-auto-mode)

  ;; Block C-n and C-p from opening up previews when using auto-mode
  (add-hook 'org-latex-preview-auto-ignored-commands 'next-line)
  (add-hook 'org-latex-preview-auto-ignored-commands 'previous-line)

  ;; Enable consistent equation numbering
  (setq org-latex-preview-numbered t)

  ;; Bonus: Turn on live previews.  This shows you a live preview of a LaTeX
  ;; fragment and updates the preview in real-time as you edit it.
  ;; To preview only environments, set it to '(block edit-special) instead
  (setq org-latex-preview-live t)

  (add-hook 'org-latex-preview-overlay-open-functions
            (defun my/org-latex-preview-uncenter (ov)
              (overlay-put ov 'before-string nil)))
  (add-hook 'org-latex-preview-overlay-close-functions
            (defun my/org-latex-preview-recenter (ov)
              (overlay-put ov 'before-string (overlay-get ov 'justify))))
  (defun my/org-latex-preview-center (ov)
    (save-excursion
      (goto-char (overlay-start ov))
      (when-let* ((elem (org-element-context))
                  ((or (eq (org-element-type elem) 'latex-environment)
                       (string-match-p "^\\\\\\[" (org-element-property :value elem))))
                  (img (overlay-get ov 'display))
                  (prop `(space :align-to (- center (0.55 . ,img))))
                  (justify (propertize " " 'display prop 'face 'default)))
        (overlay-put ov 'justify justify)
        (overlay-put ov 'before-string (overlay-get ov 'justify)))))

  (add-hook 'org-latex-preview-overlay-update-functions
            #'my/org-latex-preview-center))
#+end_src
** 设置 org-variable
:PROPERTIES:
:ID:       9d20983d-4b67-409e-a118-e8131012e989
:END:
#+begin_src emacs-lisp conf :tangle config.el

(setq org_notes  "~/org/"
      org-directory org_notes)

#+end_src
** 设置 org 常用设置
:PROPERTIES:
:ID:       3fcd76df-a2bc-4291-9012-9ed3d1acc490
:END:
#+begin_src emacs-lisp :tangle config.el
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!

(use-package! org
  :config
  ;; pretty org files
  (setq org-auto-align-tags nil
        org-tags-column 0
        org-catch-invisible-edits 'show-and-error

        ;; Org styling, hide markup etc.
        org-hide-emphasis-markers t
        org-pretty-entities t

  )
  (setq org-ellipsis "...")
  (setq  org-adapt-indentation nil)
  (setq  org-hidden-keywords nil)
  (setq  org-hide-emphasis-markers t)
  (setq  org-hide-leading-stars nil)
  (setq  org-image-actual-width '(300))
  (setq  org-imenu-depth 1)
  (setq  org-pretty-entities t)
  (setq  org-startup-folded t)
  (setq org-startup-with-inline-images t)
  (setq org-hide-leading-stars t)
  (setq org-use-property-inheritance t)              ; it's convenient to have properties inherited
  (setq org-log-done 'time             )             ; having the time a item is done sounds convenient
  (setq org-export-in-background t)                  ; run export processes in external emacs process
  (setq org-catch-invisible-edits 'smart)            ; try not to accidently do weird stuff in invisible regions
  (setq org-export-with-sub-superscripts '{})        ; don't treat lone _ / ^ as sub/superscripts, require _{} / ^{}
  (setq org-special-ctrl-a/e t
        org-hide-leading-stars t) ;; When t, C-a will bring back the cursor to the beginning of the headline text, i.e. after the stars and after a possible TODO keyword.
  (setq org-src-tab-acts-natively t) ;; source block 缩进
  :custom-face
  (org-level-1 ((t (:height 1.15))))
  (org-level-2 ((t (:height 1.13))))
  (org-level-3 ((t (:height 1.11))))
  (org-level-4 ((t (:height 1.09))))
  (org-level-5 ((t (:height 1.07))))
  (org-level-6 ((t (:height 1.05))))
  (org-level-7 ((t (:height 1.03))))
  (org-level-8 ((t (:height 1.01))))
  (org-todo ((t (:inherit 'fixed-pitch))))
  (org-done ((t (:inherit 'fixed-pitch))))
  (org-ellipsis ((t (:inherit 'fixed-pitch))))
  (org-property-value ((t (:inherit 'fixed-pitch))))
  (org-special-keyword ((t (:inherit 'fixed-pitch))))
)

#+end_src

** org 美化
:PROPERTIES:
:ID:       85728e6b-30dd-4781-b1f2-a0e7462f6f45
:END:
#+begin_src emacs-lisp conf :tangle packages.el
(package! org-modern)
(package! org-appear)
;;(package! valign :recipe (:host github :repo "casouri/valign"))
;;(package! org-superstar)

;;(package! org-visual-outline)
#+end_src


#+begin_src emacs-lisp conf :tangle config.el
;;(use-package! org-visual-outline
;;  :after org
;;  :hook
;;  (org-mode . org-dynamic-bullets-mode)
;;  (org-mode . org-visual-indent-mode)
;;
;;  )


(use-package! visual-fill-column
  :after org
  :custom
  (visual-fill-column-width 80))

(use-package! org-modern
  :hook (org-mode . org-modern-mode)
        (org-agenda-finalize . org-modern-agenda)
)

(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autolinks t
        org-appear-autosubmarkers t
        org-appear-autoentities t
        org-appear-autokeywords t
        org-appear-inside-latex t
        )
)

;;(use-package! valign
;;  :hook
;;  (org-mode . valign-mode)
;;  (markdown-mode . valign-mode)
;;  :config
;;  (setq valign-fancy-bar 1)
;;)

#+end_src

** org-download :ATTACH:
:PROPERTIES:
:ID:       1e1e87f9-323b-46b6-87b1-0748b585dac3
:END:
#+begin_src emacs-lisp conf :tangle packages.el
(package! org-download)
#+end_src

#+begin_src emacs-lisp conf :tangle config.el
;; config org download
(use-package! org-download
  ;;:hook ((org-mode dired-mode) . org-download-enable)
  :after org
  :config
  (setq-default org-download-method 'directory)
  (setq-default org-download-image-dir "~/Documents/org-attach")
  (setq-default org-download-heading-lvl 'nil)
)
#+end_src



** org babel
** org mind map
:PROPERTIES:
:ID:       72e9d184-30da-46b7-a67a-ce1d3e796b10
:END:
#+begin_src emacs-lisp :tangle packages.el
;;(package! org-mind-map :recipe (:host github :repo "the-ted/org-mind-map"
;;                                :files ("*.el")))
#+end_src

#+begin_src emacs-lisp conf :tangle config.el

;; config org-mode
;;(use-package! org-mind-map
;;  :config
;;  (setq org-mind-map-engine "dot")
;;)
#+end_src
** org-brain
:PROPERTIES:
:ID:       4363bd88-37fd-448e-8b22-6a42e6f7c19e
:END:
#+begin_src emacs-lisp conf :tangle packages.el
;;(package! org-brain)
;;(package! polymode)
#+end_src

#+begin_src emacs-lisp :conf :tangle config.el
;; config org brain
;;(use-package! org-brain
;;  :after org
;;  :hook
;;  (before-save-hook . #'org-brain-ensure-ids-in-buffer)
;;  :init
;;  (setq org-brain-path (concat org-directory "brain"))
;;  ;; For Evil users
;;  (with-eval-after-load 'evil
;;    (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
;;  :config
;;  (setq org-id-track-globally t)
;;  (setq org-id-locations-file (concat org-directory ".orgids"))
;;  (add-hook 'before-save-hook )
;;  (setq org-brain-visualize-default-choices 'all)
;;  (setq org-brain-title-max-length 12)
;;  (setq org-brain-include-file-entries nil
;;        org-brain-file-entries-use-title nil))

;; Allows you to edit entries directly from org-brain-visualize
;;(use-package! polymode
;;  :config
;;  (add-hook 'org-brain-visualize-mode-hook #'org-brain-polymode))
#+end_src

** org-agenda
:PROPERTIES:
:ID:       ee84bfc0-3e42-4a8d-a9c2-2d8c3093d06d
:END:

#+begin_src emacs-lisp conf :tangle config.el
(use-package! org-agenda
  :after org
  :config
  (setq org-agenda-files '("~/org/pages/TODO.org"))
  ;; 时间前导0
  (setq org-agenda-time-leading-zero t)
  ;; 默认显示区间
  (setq org-agenda-span 7)
  ;; agenda view 默认从周一开始显示
  (setq org-agenda-start-on-weekday 1)
   ;; Agenda styling
   (setq org-agenda-tags-column 0
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "⭠ now ─────────────────────────────────────────────────")
)
#+end_src
** org ppt
:PROPERTIES:
:ID:       06f8936a-d6b2-4e5e-b2e1-a1c8ff3ad6e0
:END:
#+begin_src emacs-lisp conf :tangle config.el
;;(use-package! org-re-reveal
;;  :after org
;;  :config
;;  (setq org-re-reveal-width 1200)
;;  (setq org-re-reveal-height 1000)
;;  (setq org-re-reveal-margin "0.1")
;;  (setq org-re-reveal-min-scale "0.5")
;;  (setq org-re-reveal-max-scale "2.5")
;;  (setq org-re-reveal-transition "cube")
;;  (setq org-re-reveal-control t)
;;  (setq org-re-reveal-center t)
;;  (setq org-re-reveal-progress t)
;;  (setq org-re-reveal-history nil)
;;)
#+end_src
** org mode enhance
:PROPERTIES:
:ID:       10967870-52c8-4195-9b79-a1a929cb7969
:END:
#+begin_src emacs-lisp :conf :tangle config.el
#+end_src
** org capture
:PROPERTIES:
:ID:       990855ee-96c3-46f1-b16c-7105f6094ca0
:END:
#+begin_src emacs-lisp :tangle packages.el
;;(package! doct
;;  :recipe (:host github :repo "progfolio/doct"))
#+end_src

~doct~ (Declarative Org Capture Templates) seems to be a nicer way to set up org-capture.

#+begin_src elisp :tangle config.el
(use-package! org-capture
  :after org
  )
#+end_src
** org hugo
:PROPERTIES:
:ID:       a7fb163c-1d82-4670-ac10-a6180cac2cfb
:END:
#+begin_src elisp :tangle config.el
(use-package! ox-hugo
  :after org-capture ox
  :config
  (setq org-hugo-default-static-subdirectory-for-externals "img")
)
#+end_src

* org-roam
:PROPERTIES:
:ID:       466ca3d1-ca43-4265-9493-1177afe300ce
:END:
** org-roam settings
:PROPERTIES:
:ID: 3f6a8789-2cb1-45ec-ab57-063d22cceaf8
:END:
#+begin_src elisp :tangle packages.el
(unpin! org-roam)
(package! org-roam)

(unpin! org-roam-ui)
(package! org-roam-ui)

(package! consult-org-roam)
(package! emacsql-sqlite-builtin)

#+end_src
1. 设置org-roam templates 可以与 org-capture 混合使用
2. 自动创建笔记的创建时间和修改时间
3. 跨文件的引用，能够实现笔记的一处修改，处处修改
   - 实现效果不太好


#+begin_src emacs-lisp conf :tangle config.el
;; Heavily modified based on https://github.com/novoid/title-capitalization.el/blob/master/title-capitalization.el
(defun title-capitalization (str)
  "Convert str to title case"
  (interactive)
  (with-temp-buffer
    (insert str)
    (let* ((beg (point-min))
           (end (point-max))
	   ;; Basic list of words which don't get capitalized according to simplified rules
	   ;; http://karl-voit.at/2015/05/25/elisp-title-capitalization/
           (do-not-capitalize-basic-words '("a" "ago" "an" "and" "as" "at" "but" "by" "for"
                                            "from" "in" "into" "it" "next" "nor" "of" "off"
                                            "on" "onto" "or" "over" "past" "so" "the" "till"
                                            "to" "up" "yet"
                                            "n" "t" "es" "s"))
	   ;; If user has defined 'my-do-not-capitalize-words, append to basic list
           (do-not-capitalize-words (if (boundp 'my-do-not-capitalize-words)
                                        (append do-not-capitalize-basic-words my-do-not-capitalize-words )
                                      do-not-capitalize-basic-words)))
      ;; Go to begin of first word
      (goto-char beg)
      (setq continue t)

      ;; Go through the region, word by word
      (while continue
        (let ((last-point (point)))
          (let ((word (thing-at-point 'word)))
            (if (stringp word)
                ;; Capitalize current word except when it is list member
                (if (and (member (downcase word) do-not-capitalize-words)
                         ;; Always capitalize first word
                         (not (= (point) 1)))
                    (downcase-word 1)

                  ;; If it's an acronym, don't capitalize
                  (if (string= word (upcase word))
                      (progn
                        (goto-char (+ (point) (length word) 1)))
                    (capitalize-word 1)))))

          (skip-syntax-forward "^w" end)

          ;; Break if we are at the end of the buffer
          (when (= (point) last-point)
            (setq continue nil))))

      ;; Always capitalize the last word
      (backward-word 1)

      (let ((word (thing-at-point 'word)))
        (if (and (>= (point) 0)
                 (not (member (or word "s")
                              '("n" "t" "es" "s")))
                 (not (string= word (upcase word))))
            (capitalize-word 1))))

    (buffer-string)))


(use-package! org-roam
  :after org
  :commands (org-roam-buffer
             org-roam-setup
             org-roam-capture
             org-roam-node-find)
  ;;:bind (("C-c n r a" . org-id-get-create)
  ;;       ("C-c n r l" . org-roam-buffer-toggle)
  ;;       ("C-c n r f" . org-roam-node-find)
  ;;       ("C-c n r g" . org-roam-graph)
  ;;       ("C-c n r i" . org-roam-node-insert)
  ;;       ("C-c n r c" . org-roam-capture)
  ;;       ("C-c n r r" . org-roam-ref-find)
  ;;       ("C-c n r R" . org-roam-ref-add)
  ;;       ("C-c n r s" . org-roam-db-sync)
  ;;       ("C-c n r e" . org-roam-to-hugo-md)
  ;;       ;; Dailies
  ;;       ("C-c n r j" . org-roam-dailies-capture-today))
  :init
   (defun my/org-roam--extract-note-body (file)
    (with-temp-buffer
      (insert-file-contents file)
      (org-mode)
      (first (org-element-map (org-element-parse-buffer) 'paragraph
               (lambda (paragraph)
                 (let ((begin (plist-get (first (cdr paragraph)) :begin))
                       (end (plist-get (first (cdr paragraph)) :end)))
                   (buffer-substring begin end)))))))
  ;; Include backlinks in org exported notes not tagged as private or
  ;; draft or section
  (defun my/org-roam--backlinks-list (id file)
    (--reduce-from
     (concat acc (format "- [[id:%s][%s]]\n  #+begin_quote\n  %s\n  #+end_quote\n"
                         (car it)
                         (title-capitalization (org-roam-node-title (org-roam-node-from-id (car it))))
                         (my/org-roam--extract-note-body (org-roam-node-file (org-roam-node-from-id (car it))))))
     ""
     (org-roam-db-query
      (format
       ;; The percentage sign needs to be escaped twice because there
       ;; is two format calls—once here and the other by emacsql
       "SELECT id FROM (SELECT links.source AS id, group_concat(tags.tag) AS alltags FROM links LEFT OUTER JOIN tags ON links.source = tags.node_id WHERE links.type = '\"id\"' AND links.dest = '\"%s\"' GROUP BY links.source) Q WHERE alltags IS NULL OR (','||alltags||',' NOT LIKE '%%%%,\"private\",%%%%' AND ','||alltags||',' NOT LIKE '%%%%,\"draft\",%%%%' AND ','||alltags||',' NOT LIKE '%%%%,\"section\",%%%%')"
       id))))

  (defun file-path-to-md-file-name (path)
    (let ((file-name (first (last (split-string path "/")))))
      (concat (first (split-string file-name "\\.")) ".md")))

  (defun file-path-to-slug (path)
    (let* ((file-name (file-name-nondirectory path))
           (note-name (car (last (split-string file-name "--"))))
           (title (first (split-string note-name "\\."))))
      (replace-regexp-in-string (regexp-quote "_") "-" title nil 'literal)))

  ;; Org export is very slow when processing org-id links. Override it
  ;; to skip opening the file and loading all modes.
  (defun my/org-export--collect-tree-properties (data info)
    "Extract tree properties from parse tree.

    DATA is the parse tree from which information is retrieved.  INFO
    is a list holding export options.

    Following tree properties are set or updated:

    `:headline-offset' Offset between true level of headlines and
                       local level.  An offset of -1 means a headline
                       of level 2 should be considered as a level
                       1 headline in the context.

    `:headline-numbering' Alist of all headlines as key and the
                          associated numbering as value.

    `:id-alist' Alist of all ID references as key and associated file
                as value.

    Return updated plist."
    ;; Install the parse tree in the communication channel.
    (setq info (plist-put info :parse-tree data))
    ;; Compute `:headline-offset' in order to be able to use
    ;; `org-export-get-relative-level'.
    (setq info
          (plist-put info
                     :headline-offset
                     (- 1 (org-export--get-min-level data info))))
    ;; From now on, properties order doesn't matter: get the rest of the
    ;; tree properties.
    (org-combine-plists
     info
     (list :headline-numbering (org-export--collect-headline-numbering data info)
           :id-alist
           (org-element-map data 'link
             (lambda (l)
               (and (string= (org-element-property :type l) "id")
                    (let* ((id (org-element-property :path l))
                           (file (org-id-find-id-file id)))
                      (and file (cons id (file-relative-name file))))))))))

  (advice-add 'org-export--collect-tree-properties :override #'my/org-export--collect-tree-properties)

  ;; No notes use anchor links so ignore this to speed it up
  (defun my/org-hugo-link--headline-anchor-maybe (link)
    "")
  (advice-add 'org-hugo-link--headline-anchor-maybe :override #'my/org-hugo-link--headline-anchor-maybe)

  ;; ox-hugo doesn't set the `relref` path correctly so we need to
  ;; tell it how to do it
  (defun my/org-id-path-fix (strlist)
    (file-name-nondirectory strlist))

  (advice-add 'org-export-resolve-id-link :filter-return #'my/org-id-path-fix)

  ;; Fetches all org-roam files and exports to hugo markdown
  ;; files. Adds in necessary hugo properties
  ;; e.g. HUGO_BASE_DIR. Ignores notes tagged as private or draft
  (defun org-roam-to-hugo-md ()
    (interactive)
    ;; Make sure the author is set
    (setq user-full-name "klchen0112")

    ;; Don't include any files tagged as private or
    ;; draft. The way we filter tags doesn't work nicely
    ;; with emacsql's DSL so just use a raw SQL query
    ;; for clarity
    (let ((notes (org-roam-db-query "SELECT id, file FROM (SELECT nodes.id, nodes.file, group_concat(tags.tag) AS alltags FROM nodes LEFT OUTER JOIN tags ON nodes.id = tags.node_id GROUP BY nodes.file) WHERE alltags is null or (','||alltags||',' not like '%%,\"private\",%%' and ','||alltags||',' not like '%%,\"draft\",%%')")))
      (-map
       (-lambda ((id file))
         ;; Use temporary buffer to prevent a buffer being opened for
         ;; each note file.
         (with-temp-buffer
           (insert-file-contents file)

           ;; Adding these tags must go after file content because it
           ;; will include a :PROPERTIES: drawer as of org-roam v2
           ;; which must be the first item on the page

           ;; Add in hugo tags for export. This lets you write the
           ;; notes without littering HUGO_* tags everywhere
           ;; HACK:
           ;; org-export-output-file-name doesn't play nicely with
           ;; temp buffers since it attempts to get the file name from
           ;; the buffer. Instead we explicitely add the name of the
           ;; exported .md file otherwise you would get prompted for
           ;; the output file name on every note.
           (goto-char (point-min))
           (re-search-forward ":END:")
           (newline)
           (insert
            (format "#+HUGO_BASE_DIR: %s\n#+HUGO_SECTION: ./\n#+HUGO_SLUG: %s\n#+EXPORT_FILE_NAME: %s\n"
                    org-roam-publish-path
                    (file-path-to-slug file)
                    (file-path-to-md-file-name file)))

           ;; If this is a placeholder note (no content in the
           ;; body) then add default text. This makes it look ok when
           ;; showing note previews in the index and avoids a headline
           ;; followed by a headline in the note detail page.
           (if (eq (my/org-roam--extract-note-body file) nil)
               (progn
                 (goto-char (point-max))
                 (insert "\n/This note does not have a description yet./\n")))

           ;; Add in backlinks (at the end of the file) because
           ;; org-export-before-processing-hook won't be useful the
           ;; way we are using a temp buffer
           (let ((links (my/org-roam--backlinks-list id file)))
             (if (not (string= links ""))
                 (progn
                   (goto-char (point-max))
                   (insert (concat "\n* Links to this note\n") links))))

           (org-hugo-export-to-md)))
       notes)))
  :config
  (setq ;;org-roam-database-connector 'sqlite-builtin
   org-roam-directory (file-truename "~/org")
   org-roam-publish-path "~/Projects/zettel"
   org-roam-dailies-directory (file-truename "~/org/journals/")
   org-roam-file-extensions '("org"))
  ;; 自动创建org roam 文件夹
  (unless (file-exists-p org-roam-directory) (make-directory org-roam-directory t))
  (unless (file-exists-p org-roam-directory) (make-directory org-roam-dailies-directory t))
  (setq org-id-link-to-org-use-id t)
  (setq org-roam-completion-everywhere t)
  (setq org-roam-capture-templates
        '(("d" "default" plain "%?"
           :target
           (file+head "pages/${slug}.org" "#+title: ${title}\n- tags :: \n")
           :unnarrowed t)))
  (setq org-roam-dailies-capture-templates
        '(
          ("t" "tasks" entry "* TODO %?"
           :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y/%m/%d>\n#+filetags: :journal:\n" ("TODO Tasks :task:")))
          ("n" "notes" entry "* %?"
           :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y/%m/%d>\n#+filetags: :journal:\n" ("Notes :note:")))
          )
        )

  (setq org-roam-mode-sections
        (list #'org-roam-backlinks-section
              #'org-roam-reflinks-section
              #'org-roam-unlinked-references-section)
        )
  )

(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  :commands org-roam-ui-open
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start nil))
#+end_src

** org roam timestamps
:PROPERTIES:
:ID:       09752942-9f28-4b04-b64e-867b2186dae1
:END:
自动记录包含 org-id 的节点的修改时间
#+begin_src emacs-lisp conf :tangle packages.el
(package! org-roam-timestamps)
#+end_src

#+begin_src emacs-lisp :tangle config.el
;;自动创建笔记的创建时间和修改时间
(use-package! org-roam-timestamps
  :after org-roam
  :config
  (org-roam-timestamps-mode)
  (setq org-roam-timestamps-parent-file t))

#+end_src
** org transculsion
:PROPERTIES:
:ID:       5586b987-8479-49cf-be97-721142a74ac4
:END:
#+begin_src emacs-lisp :tangle packages.el
(package! org-transclusion)
#+end_src

#+begin_src emacs-lisp :tangle config.el
;;跨文件的引用，能够实现笔记的一处修改，处处修改。
(use-package! org-transclusion
  :after org
  :commands org-transclusion-mode
  :init
  (map!
   :map global-map "<f12>" #'org-transclusion-add
   :leader
   :prefix "n"
   :desc "Org Transclusion Mode" "t" #'org-transclusion-mode))
#+end_src
** org-roam-enhance
:PROPERTIES:
:ID:       773deaf6-f5cb-4d40-89de-b38bb67f47dd
:END:
1. use vulpea for auto add tag roam-agenda and add TODO file to org-todo
2. use org-transclusion for insert block for org
#+begin_src emacs-lisp conf :tangle packages.el
(package! vulpea)
(package! consult-org-roam)
;;TODO
;;(package! nursery
;;     :recipe (:host github :repo "chrisbarrett/nursery"))

#+end_src


#+begin_src emacs-lisp conf :tangle config.el

;; this code from https://github.com/brianmcgillion/doomd/blob/master/config.org
(use-package! vulpea
  :after (org-agenda org-roam)
  :commands (bmg/vulpea-agenda-files-update bmg/vulpea-project-update-tag)
  :init
  (add-hook 'find-file-hook #'bmg/vulpea-project-update-tag)
  (add-hook 'before-save-hook #'bmg/vulpea-project-update-tag)
  (advice-add 'org-agenda :before #'bmg/vulpea-agenda-files-update)
  :hook ((org-roam-db-autosync-mode . vulpea-db-autosync-enable))
  :config
  (defun bmg/vulpea-project-p ()
    "Return non-nil if current buffer has any todo entry.
TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks."
    (seq-find                                 ; (3)
     (lambda (type)
       (eq type 'todo))
     (org-element-map                         ; (2)
         (org-element-parse-buffer 'headline) ; (1)
         'headline
       (lambda (h)
         (org-element-property :todo-type h)))))

  (defun bmg/vulpea-project-update-tag ()
    "Update PROJECT tag in the current buffer."
    (when (and (not (active-minibuffer-window))
               (bmg/vulpea-buffer-p))
      (save-excursion
        (goto-char (point-min))
        (let* ((tags (vulpea-buffer-tags-get))
               (original-tags tags))
          (if (bmg/vulpea-project-p)
              (setq tags (cons "org-roam-agenda" tags))
            (setq tags (remove "org-roam-agenda" tags)))

          ;; cleanup duplicates
          (setq tags (seq-uniq tags))

          ;; update tags if changed
          (when (or (seq-difference tags original-tags)
                    (seq-difference original-tags tags))
            (apply #'vulpea-buffer-tags-set tags))))))

  (defun bmg/vulpea-buffer-p ()
    "Return non-nil if the currently visited buffer is a note."
    (and buffer-file-name
         (string-prefix-p
          (expand-file-name (file-name-as-directory org-roam-directory))
          (file-name-directory buffer-file-name))))

  (defun bmg/vulpea-project-files ()
    "Return a list of note files containing 'project' tag." ;
    (seq-uniq
     (seq-map
      #'car
      (org-roam-db-query
       [:select [nodes:file]
        :from tags
        :left-join nodes
        :on (= tags:node-id nodes:id)
        :where (like tag (quote "%\"org-roam-agenda\"%"))]))))

  (defun bmg/vulpea-agenda-files-update (&rest _)
    "Update the value of `org-agenda-files'."
    (setq org-agenda-files (bmg/vulpea-project-files)))

  (defun bmg/vulpea-agenda-category (&optional len)
    "Get category of item at point for agenda.

Category is defined by one of the following items:

- CATEGORY property
- TITLE keyword
- TITLE property
- filename without directory and extension

When LEN is a number, resulting string is padded right with
spaces and then truncated with ... on the right if result is
longer than LEN.

Usage example:

  (setq org-agenda-prefix-format
        '((agenda . \" %(vulpea-agenda-category) %?-12t %12s\")))

Refer to `org-agenda-prefix-format' for more information."
    (let* ((file-name (when buffer-file-name
                        (file-name-sans-extension
                         (file-name-nondirectory buffer-file-name))))
           (title (vulpea-buffer-prop-get "title"))
           (category (org-get-category))
           (result
            (or (if (and
                     title
                     (string-equal category file-name))
                    title
                  category)
                "")))
      (if (numberp len)
          (s-truncate len (s-pad-right len " " result))
        result))))


;;(use-package! org-roam-review
;; :commands (org-roam-review
;;            org-roam-review-list-by-maturity
;;            org-roam-review-list-recently-added)

  ;; ;; Optional - tag all newly-created notes as seedlings.
  ;; :hook (org-roam-capture-new-node . org-roam-review-set-seedling)

  ;; ;; Optional - keybindings for applying Evergreen note properties.
  ;; :general
  ;; (:keymaps 'org-mode-map
  ;; "C-c r r" '(org-roam-review-accept :wk "accept")
  ;; "C-c r u" '(org-roam-review-bury :wk "bury")
  ;; "C-c r x" '(org-roam-review-set-excluded :wk "set excluded")
  ;; "C-c r b" '(org-roam-review-set-budding :wk "set budding")
  ;; "C-c r s" '(org-roam-review-set-seedling :wk "set seedling")
  ;; "C-c r e" '(org-roam-review-set-evergreen :wk "set evergreen"))

  ;; ;; Optional - bindings for evil-mode compatability.
  ;; :general
  ;; (:states '(normal) :keymaps 'org-roam-review-mode-map
  ;; "TAB" 'magit-section-cycle
  ;; "g r" 'org-roam-review-refresh)
  ;;)

(use-package consult-org-roam
   :ensure t
   :after org-roam
   :init
   (consult-org-roam-mode 1)
   :custom
   ;; Use `ripgrep' for searching with `consult-org-roam-search'
   (consult-org-roam-grep-func #'consult-ripgrep)
   ;; Configure a custom narrow key for `consult-buffer'
   (consult-org-roam-buffer-narrow-key ?r)
   ;; Display org-roam buffers right after non-org-roam buffers
   ;; in consult-buffer (and not down at the bottom)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize
    consult-org-roam-forward-links
    :preview-key (kbd "M-."))
   ;;:bind
   ;; Define some convenient keybindings as an addition
   ;;("C-c n e" . consult-org-roam-file-find)
   ;;("C-c n b" . consult-org-roam-backlinks)
   ;;("C-c n l" . consult-org-roam-forward-links)
   ;;("C-c n r" . consult-org-roam-search)
   )




;;(use-package org-roam-review
;;  :commands (org-roam-review
;;             org-roam-review-list-by-maturity
;;             org-roam-review-list-recently-added)
;;
;;  ;; ;; Optional - tag all newly-created notes as seedlings.
;;  ;; :hook (org-roam-capture-new-node . org-roam-review-set-seedling)
;;
;;  ;; ;; Optional - keybindings for applying Evergreen note properties.
;;  ;; :general
;;  ;; (:keymaps 'org-mode-map
;;  ;; "C-c r r" '(org-roam-review-accept :wk "accept")
;;  ;; "C-c r u" '(org-roam-review-bury :wk "bury")
;;  ;; "C-c r x" '(org-roam-review-set-excluded :wk "set excluded")
;;  ;; "C-c r b" '(org-roam-review-set-budding :wk "set budding")
;;  ;; "C-c r s" '(org-roam-review-set-seedling :wk "set seedling")
;;  ;; "C-c r e" '(org-roam-review-set-evergreen :wk "set evergreen"))
;;
;;  ;; ;; Optional - bindings for evil-mode compatability.
;;  ;; :general
;;  ;; (:states '(normal) :keymaps 'org-roam-review-mode-map
;;  ;; "TAB" 'magit-section-cycle
;;  ;; "g r" 'org-roam-review-refresh)
;;  )
;;
;;(use-package org-roam-search
;;  :commands (org-roam-search))
;;
;;(use-package org-roam-links
;;  :commands (org-roam-links))
;;
;;(use-package org-roam-dblocks
;;  :hook (org-mode . org-roam-dblocks-autoupdate-mode))
;;
;;(use-package org-roam-rewrite
;;  :commands (org-roam-rewrite-rename
;;             org-roam-rewrite-remove
;;             org-roam-rewrite-inline
;;             org-roam-rewrite-extract))
;;
;;(use-package org-roam-slipbox
;;  :after org-roam
;;  :demand t
;;  :config
;;  (org-roam-slipbox-buffer-identification-mode +1)
;;  (org-roam-slipbox-tag-mode +1))

#+end_src
* Input Method
** smart input source
:PROPERTIES:
:ID:       8d800b39-c8e6-4423-9cc8-cae91df94f67
:END:
#+begin_src emacs-lisp :tangle packages.el
;;(package! sis)
#+end_src

#+begin_src emacs-lisp :tangle config.el
;;(use-package! sis
;;  ;; :hook
;;  ;; enable the /context/ and /inline region/ mode for specific buffers
;;  ;; (((text-mode prog-mode) . sis-context-mode)
;;  ;;  ((text-mode prog-mode) . sis-inline-mode))
;;  :after meow
;;  :config
;;  ;; For MacOS
;;  (sis-ism-lazyman-config
;;   ;; English input source may be: "ABC", "US" or another one.
;;   ;; "com.apple.keylayout.ABC"
;;   "com.apple.keylayout.ABC"
;;   ;; Other language input source: "rime", "sogou" or another one.
;;   ;; "im.rime.inputmethod.Squirrel.Rime"
;;   "im.rime.inputmethod.Squirrel.Hans")
;;  (add-hook 'meow-insert-exit-hook #'sis-set-english)
;;  (add-hook 'meow-insert-enter-hook #'sis-set-english)
;;  (add-to-list 'sis-context-hooks 'meow-insert-exit-hook)
;;  (add-to-list 'sis-context-hooks 'meow-insert-enter-hook)
;;  (add-to-list 'sis-respect-minibuffer-triggers (cons 'org-roam-node-find (lambda () 'other)))
;;  (add-to-list 'sis-respect-minibuffer-triggers (cons 'org-roam-node-insert (lambda () 'other)))
;;)
#+end_src
** Rime
1. 使用rime作为输入法
2. 加入了中英文自动检测
*** Package
:PROPERTIES:
:ID:       e3d48ce3-a022-4f8e-8455-0f2c7856d579
:END:
#+begin_src emacs-lisp :tangle packages.el
(package! rime)
(package! rime-regexp :recipe (:host github :repo "colawithsauce/rime-regexp.el"))
#+end_src
*** rime init
:PROPERTIES:
:ID:       8b4d6475-ea71-47c9-8aef-ea466ea13b24
:END:
#+begin_src emacs-lisp conf :tangle config.el

(use-package! rime
  :bind
  (:map rime-mode-map
        ("S- " . 'rime-send-keybinding))
  :config
  (setq rime-librime-root
        (car (last (split-string (shell-command-to-string "nix eval --raw nixpkgs#librime") "\n"))))
  (setq rime-show-candidate 'posframe)
  (setq rime-show-preedit 'inline)
  (setq rime-user-data-dir (expand-file-name "Rime" doom-emacs-dir))
  (setq rime-emacs-module-header-root
        (if IS-MAC
            (concat
             (car (last
                   (split-string (shell-command-to-string "nix eval --raw ~/myOpenSource/dotfiles#emacs-plus") "\n")
                   ))
             "/include")
          )
        )
  (setq default-input-method "rime")
  (setq rime-inline-ascii-trigger 'shift-r)
  (setq rime-translate-keybindings '("C-f" "C-b" "C-n" "C-p" "C-g" "<left>" "<right>" "<up>" "<down>" "<prior>" "<next>" "<delete>"))
  (setq rime-disable-predicates
        '(meow-normal-mode-p
          meow-motion-mode-p
          meow-keypad-mode-p
          meow-beacon-mode-p))
  )

(use-package rime-regexp
  :config
  (rime-regexp-mode t))

#+end_src
* completion
** tempel
:PROPERTIES:
:ID:       53618ac2-2311-45bb-b4f3-40ffa5559db3
:END:
#+begin_src emacs-lisp :tangle packages.el
;;(package! tempel)
;;(package! tempel-collection)
#+end_src

#+begin_src emacs-lisp :tangle config.el
;; Configure Tempel
;;(use-package! tempel
;;  ;; Require trigger prefix before template name when completing.
;;  ;; :custom
;;  ;; (tempel-trigger-prefix "<")
;;
;;  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
;;         ("M-*" . tempel-insert))
;;  :after corfu
;;  :init
;;
;;  ;; Setup completion at point
;;  (defun tempel-setup-capf ()
;;    ;; Add the Tempel Capf to `completion-at-point-functions'.
;;    ;; `tempel-expand' only triggers on exact matches. Alternatively use
;;    ;; `tempel-complete' if you want to see all matches, but then you
;;    ;; should also configure `tempel-trigger-prefix', such that Tempel
;;    ;; does not trigger too often when you don't expect it. NOTE: We add
;;    ;; `tempel-expand' *before* the main programming mode Capf, such
;;    ;; that it will be tried first.
;;    (setq-local completion-at-point-functions
;;                (cons #'tempel-expand
;;                      completion-at-point-functions)))
;;
;;  (add-hook 'prog-mode-hook 'tempel-setup-capf)
;;  (add-hook 'text-mode-hook 'tempel-setup-capf)
;;
;;  ;; Optionally make the Tempel templates available to Abbrev,
;;  ;; either locally or globally. `expand-abbrev' is bound to C-x '.
;;  ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
;;  ;; (global-tempel-abbrev-mode)
;;)
;;
;;;; Optional: Add tempel-collection.
;;;; The package is young and doesn't have comprehensive coverage.
;;(use-package! tempel-collection
;;   :after tempel)

#+end_src
** codeium/copilot
:PROPERTIES:
:ID:       a6b9d1b6-a420-4626-886b-059a727f0e0e
:END:
#+begin_src emacs-lisp :tangle packages.el
(package! codeium :recipe (:host github :repo "Exafunction/codeium.el"))
;; (package! copilot
  ;; :recipe (:host github :repo "copilot-emacs/copilot.el" :files ("*.el" "dist"))
;; )
#+end_src

#+begin_src emacs-lisp :tangle config.el
;; accept completion from copilot and fallback to company
;;(use-package! copilot
;;  :hook (prog-mode . copilot-mode)
;;  :bind (:map copilot-completion-map
;;              ("<tab>" . 'copilot-accept-completion)
;;              ("TAB" . 'copilot-accept-completion)
;;              ("C-TAB" . 'copilot-accept-completion-by-word)
;;              ("C-<tab>" . 'copilot-accept-completion-by-word)))

;; we recommend using use-package to organize your init.el
(use-package! codeium
    ;; if you use straight
    ;; :straight '(:type git :host github :repo "Exafunction/codeium.el")
    ;; otherwise, make sure that the codeium.el file is on load-path

    :init
    ;; use globally
    (add-to-list 'completion-at-point-functions #'codeium-completion-at-point)
    ;; or on a hook
    ;; (add-hook 'python-mode-hook
    ;;     (lambda ()
    ;;         (setq-local completion-at-point-functions '(codeium-completion-at-point))))

    ;; if you want multiple completion backends, use cape (https://github.com/minad/cape):
    ;; (add-hook 'python-mode-hook
    ;;     (lambda ()
    ;;         (setq-local completion-at-point-functions
    ;;             (list (cape-super-capf #'codeium-completion-at-point #'lsp-completion-at-point)))))
    ;; an async company-backend is coming soon!

    ;; codeium-completion-at-point is autoloaded, but you can
    ;; optionally set a timer, which might speed up things as the
    ;; codeium local language server takes ~0.2s to start up
    ;; (add-hook 'emacs-startup-hook
    ;;  (lambda () (run-with-timer 0.1 nil #'codeium-init)))

    :defer t
    :config
    (setq use-dialog-box nil) ;; do not use popup boxes

    ;; if you don't want to use customize to save the api-key
    ;; (setq codeium/metadata/api_key "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")

    ;; get codeium status in the modeline
    (setq codeium-mode-line-enable
        (lambda (api) (not (memq api '(CancelRequest Heartbeat AcceptCompletion)))))
    (add-to-list 'mode-line-format '(:eval (car-safe codeium-mode-line)) t)
    ;; alternatively for a more extensive mode-line
    ;; (add-to-list 'mode-line-format '(-50 "" codeium-mode-line) t)

    ;; use M-x codeium-diagnose to see apis/fields that would be sent to the local language server
    (setq codeium-api-enabled
        (lambda (api)
            (memq api '(GetCompletions Heartbeat CancelRequest GetAuthToken RegisterUser auth-redirect AcceptCompletion))))
    ;; you can also set a config for a single buffer like this:
    ;; (add-hook 'python-mode-hook
    ;;     (lambda ()
    ;;         (setq-local codeium/editor_options/tab_size 4)))

    ;; You can overwrite all the codeium configs!
    ;; for example, we recommend limiting the string sent to codeium for better performance
    (defun my-codeium/document/text ()
        (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (min (+ (point) 1000) (point-max))))
    ;; if you change the text, you should also change the cursor_offset
    ;; warning: this is measured by UTF-8 encoded bytes
    (defun my-codeium/document/cursor_offset ()
        (codeium-utf8-byte-length
            (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (point))))
    (setq codeium/document/text 'my-codeium/document/text)
    (setq codeium/document/cursor_offset 'my-codeium/document/cursor_offset))
#+end_src

* Lang
** LSP mode
:PROPERTIES:
:ID:       413e9af2-7f0f-47c7-9d3f-a27c919f3bfd
:END:
#+begin_src emacs-lisp :tangle config.el
(after! lsp-mode
  (setq lsp-ui-doc-show-with-cursor t)
)
#+end_src
** python
*** conda and micromamba opt
:PROPERTIES:
:ID:       d4be558f-c96d-4107-a442-14fe7648ce6b
:END:
#+begin_src emacs-lisp :tangle packages.el
;; (if IS-MAC (package! micromamba))
#+end_src

#+begin_src emacs-lisp conf :tangle config.el
;; (if IS-MAC
;;   (use-package! micromamba)
;;   (use-package! conda
;;   ;; :init
;;     ;;:hook
;;     ;;(find-file (lambda () (when (bound-and-true-p conda-project-env-path)  (conda-env-activate-for-buffer))))
;;     :custom
;;     (conda-anaconda-home "/opt/homebrew/Caskroom/miniconda")
;;     :config
;;     (conda-env-initialize-interactive-shells)
;;     (setq conda-env-autoactivate-mode t)
;;   )
;; )
#+end_src
*
** Latex mode
*** Latex Preview
**** xenops
async latex view
***** Package
:PROPERTIES:
:ID:       815a26d8-1c63-4443-909d-bb9de95bba7d
:END:
#+begin_src emacs-lisp conf :tangle packages.el
;;(when (executable-find "xelatex")
;;  (package! xenops)
;;)
#+end_src

***** config
:PROPERTIES:
:ID:       adc082be-eeac-46ea-b23a-05294f26cb58
:END:
#+begin_src emacs-lisp conf :tangle config.el
;;(use-package! xenops
;;    :after org
;;    :hook
;;    (org-mode . xenops-mode)
;;    (latex-mode . xenops-mode)
;;    (LaTex-mode . xenops-mode)
;;    :config
;;    (setq xenops-reveal-on-entry t
;;          ;;xenops-image-directory (expand-file-name "xenops/image" doom-cache-dir)
;;          xenops-math-latex-process 'xelatex)
;;)


;;(after! xenops
;;  (defun xenops-math-block-delimiter-lines-regexp ()
;;    "A regexp matching the start or end line of any block math element."
;;    (format "\\(%s\\)"
;;            (s-join "\\|"
;;                    (apply #'append (xenops-elements-get-for-types '(block-math table algorithm) :delimiters)))))
;;  (defun xenops-math-parse-element-at-point ()
;;    "Parse any math element at point."
;;    (or (xenops-math-parse-inline-element-at-point)
;;        (xenops-math-parse-block-element-at-point)
;;        (xenops-math-parse-table-at-point)
;;        (xenops-math-parse-algorithm-at-point)))
;;
;;  (defun xenops-math-parse-algorithm-at-point ()
;;    "Parse algorithm element at point."
;;    (xenops-parse-element-at-point 'algorithm))
;;
;;
;;  (add-to-list 'xenops-elements '(algorithm
;;                                  (:delimiters
;;                                   ("^[ 	]*\\\\begin{algorithm}"
;;                                    "^[ 	]*\\\\end{algorithm}"))
;;                                  (:parser . xenops-math-parse-algorithm-at-point)
;;                                  (:handlers . block-math)))
;;  )
#+end_src
**** org-xlatex
***** package
:PROPERTIES:
:ID:       beb542d5-9260-4973-b108-c18423e1976d
:END:
#+begin_src emacs-lisp conf :tangle packages.el
;;(package! org-xlatex :recipe (:host github :repo "ksqsf/org-xlatex"))
#+end_src
***** config
:PROPERTIES:
:ID:       a72eacbd-b4dc-4afd-8265-3c2b47091a6b
:END:
#+begin_src emacs-lisp conf :tangle config.el
;;(use-package org-xlatex
;;  :after org
  ;;:hook (org-mode . org-xlatex-mode)
;;)
#+end_src
** Doc
:PROPERTIES:
:ID:       e9453c1b-4a72-4978-8a8c-a3345b999566
:END:
use dash open app dash
#+begin_src emacs-lisp :tangle packages.el
(if IS-MAC (package! dash-at-point))
#+end_src

#+begin_src emacs-lisp conf :tangle config.el
(if IS-MAC
(use-package! dash-at-point
  :config
 (add-to-list 'dash-at-point-mode-alist '(python-mode . "python3,django,twisted,sphinx,flask,tornado,sqlalchemy,numpy,scipy,saltcvp,torch,torchvision"))
))
#+END_SRC
** Copilot
:PROPERTIES:
:ID:       54b794a2-a5f3-4ac9-a8ce-5526c340ea3d
:END:
#+begin_src emacs-lisp :tangle packages.el
;;(package! copilot
;;  :recipe (:host github :repo "zerolfx/copilot.el" :files ("*.el" "dist")))
#+end_src

#+begin_src emacs-lisp :tangle config.el
;; accept completion from copilot and fallback to company
;;(use-package! copilot
;;  :hook (prog-mode . copilot-mode)
;;  :bind (:map copilot-completion-map
;;              ("<tab>" . 'copilot-accept-completion)
;;              ("TAB" . 'copilot-accept-completion)
;;              ("C-TAB" . 'copilot-accept-completion-by-word)
;;              ("C-<tab>" . 'copilot-accept-completion-by-word)))
#+end_src
* reader
** pdf tools
:PROPERTIES:
:ID:       0e9cc110-63ef-4e95-a389-173f48b658df
:END:
#+begin_src emacs-lisp :tangle packages.el
;;(unpin! pdf-tools)
#+end_src
** org noter and nov
:PROPERTIES:
:ID:       e8eadfe1-c054-4638-9a34-1da12bbe3ae3
:END:
#+begin_src emacs-lisp :tangle packages.el
;;(package! org-noter :recipe (:host github :repo "org-noter/org-noter"))

;;(package! org-noter-plus :recipe (:host github :repo "yuchen-lea/org-noter-plus"))
#+end_src


#+begin_src emacs-lisp :tangle config.el
(use-package pdf-tools
  :after org)

(use-package pdf-view
  :after (:all org pdf-tools))

(use-package! org-noter
  :after org
  :config
  (setq org-noter-notes-search-path (concat org-directory "references"))
  (setq org-noter-alway-create-frame t)
  (setq org-noter-auto-save-last-location t)
  (setq org-noter-doc-split-fraction '(0.52 0.48))
)


(after! org-noter
  (defun eli/org-noter-set-highlight (&rest _arg)
    "Highlight current org-noter note."
    (save-excursion
      (with-current-buffer (org-noter--session-notes-buffer org-noter--session)
        (remove-overlays (point-min) (point-max) 'org-noter-current-hl t)
        (goto-char (org-entry-beginning-position))
        (let* ((hl (org-element-context))
               (hl-begin (plist-get  (plist-get hl 'headline) :begin))
               (hl-end (1- (plist-get  (plist-get hl 'headline) :contents-begin)))
               (hl-ov (make-overlay hl-begin hl-end)))
          (overlay-put hl-ov 'face 'mindre-keyword)
          (overlay-put hl-ov 'org-noter-current-hl t))
        (org-cycle-hide-drawers 'all))))
  (advice-add #'org-noter--focus-notes-region
              :after #'eli/org-noter-set-highlight)
  (advice-add #'org-noter-insert-note
              :after #'eli/org-noter-set-highlight)
)

;;(use-package! org-noter-nov-overlay)

;;(use-package! org-noter-plus
;;  :commands (org-noter-plus--follow-nov-link)
;;  :config
;;  (setq org-noter-plus-image-dir "~/org/.attach/") ;; Directory to store images extracted from pdf files
;;)
;;
;;(after! nov
;;  (org-link-set-parameters "nov"
;;                           ;; Replace the default nov link to work better with org-noter
;;                           :follow 'org-noter-plus--follow-nov-link)
;;  )
#+end_src
** org media note
:PROPERTIES:
:ID:       db750490-5187-4e2f-bb38-b1ac885298b7
:END:
#+begin_src emacs-lisp :tangle packages.el
;;(package! pretty-hydra)  ;; dependency
;;(package! org-media-note :recipe (:host github :repo "yuchen-lea/org-media-note"))
#+end_src


#+begin_src emacs-lisp :tangle config.el
;;(use-package! org-media-note
;;  :init (setq org-media-note-use-org-ref t)
;;  :hook (org-mode .  org-media-note-mode)
;;  :after org
;;  :bind (("H-v" . org-media-note-hydra/body))  ;; Main entrance
;;  :config
;;  (setq org-media-note-screenshot-image-dir "~/org/.attach/")  ;; Folder to save screenshot
;;  (setq org-media-note-use-refcite-first t)  ;; use videocite link instead of video link if possible
;;  )
#+end_src
** mpvi
:PROPERTIES:
:ID:       36d364ad-6e8d-4596-8fca-e4899d1311f3
:END:

#+begin_src emacs-lisp :tangle packages.el
;;(package! mpvi :recipe (:host github :repo "lorniu/mpvi"))
#+end_src

#+begin_src emacs-lisp :tangle config.el
;;(use-package! mpvi)
#+end_src
** anki
:PROPERTIES:
:ID:       abe7ac7e-f756-454e-bfe5-68b42efe8045
:END:
#+begin_src emacs-lisp :tangle packages.el
(package! org-anki :recipe (:host github :repo "eyeinsky/org-anki"))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! org-anki)
#+end_src
* APP
:PROPERTIES:
:ID:       c5312a82-9f24-4e4b-9f81-0660dbc3d380
:END:
#+begin_src emacs-lisp :tangle packages.el
(package! telega :recipe (:host github :repo "zevlg/telega.el")  :pin "ac3634e2e7efe9c29c4311196e0ed67085d58f11")
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! telega
  :commands (telega)
  :defer t
  ;;:config
  ;;(setq telega-server-libs-prefix)
)
#+end_src
* AI+X
** org ai
#+begin_src emacs-lisp :tangle packages.el
(package! org-ai)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! org-ai
  ;;:commands (org-ai-mode org-ai-global-mode)
  :hook (org-mode . org-ai-mode)
  :after org
  :init
  (org-ai-global-mode)
  :config
  ;;(setq org-ai-default-chat-model "gpt-4") ; if you are on the gpt-4 beta:
  (org-ai-install-yasnippets)
)
#+end_src
* Other module
** Git Module
** Time tracking
:PROPERTIES:
:ID:       ea697417-3b23-406f-b821-7fd01c60d7e5
:END:
#+begin_src emacs-lisp :tangle packages.el
(package! wakatime-mode)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! wakatime-mode
  :config
  (setq wakatime-cli-path
    (cond (IS-MAC "/etc/profiles/per-user/klchen/bin/wakatime-cli")
          (IS-WINDOWS "~/.wakatime/wakatime-cli")))
  (global-wakatime-mode)
)
#+end_src



** Keyfreq
:PROPERTIES:
:ID:       82dfd063-35af-436e-8453-c1351c96e768
:END:

#+begin_src emacs-lisp :tangle packages.el
(package! keyfreq)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! keyfreq
  :config
  (setq keyfreq-mode t
        keyfreq-autosave-mode t)
)
#+end_src
